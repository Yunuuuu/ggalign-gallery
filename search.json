[
  {
    "objectID": "real-world-data.html",
    "href": "real-world-data.html",
    "title": "gallery",
    "section": "",
    "text": "Disturbance of Immune-Related Pathways between Normal and Tumor Tissues in Pan-cancer\n\n\n\nJul 30, 2025\n\n\n\n\n\n\n\n\n\n\n\nOncoplot of TCGA LAML Mutation Data\n\n\n\nJul 30, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "complexheatmap/single-heatmap.html",
    "href": "complexheatmap/single-heatmap.html",
    "title": "A Single Heatmap",
    "section": "",
    "text": "In this thread, we’ll use ggalign to draw all the heatmap in https://jokergoo.github.io/ComplexHeatmap-reference/book/a-single-heatmap.html\n\nlibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\nset.seed(123)\nnr1 &lt;- 4\nnr2 &lt;- 8\nnr3 &lt;- 6\nnr &lt;- nr1 + nr2 + nr3\nnc1 &lt;- 6\nnc2 &lt;- 8\nnc3 &lt;- 10\nnc &lt;- nc1 + nc2 + nc3\nmat &lt;- cbind(\n    rbind(\n        matrix(rnorm(nr1 * nc1, mean = 1, sd = 0.5), nrow = nr1),\n        matrix(rnorm(nr2 * nc1, mean = 0, sd = 0.5), nrow = nr2),\n        matrix(rnorm(nr3 * nc1, mean = 0, sd = 0.5), nrow = nr3)\n    ),\n    rbind(\n        matrix(rnorm(nr1 * nc2, mean = 0, sd = 0.5), nrow = nr1),\n        matrix(rnorm(nr2 * nc2, mean = 1, sd = 0.5), nrow = nr2),\n        matrix(rnorm(nr3 * nc2, mean = 0, sd = 0.5), nrow = nr3)\n    ),\n    rbind(\n        matrix(rnorm(nr1 * nc3, mean = 0.5, sd = 0.5), nrow = nr1),\n        matrix(rnorm(nr2 * nc3, mean = 0.5, sd = 0.5), nrow = nr2),\n        matrix(rnorm(nr3 * nc3, mean = 1, sd = 0.5), nrow = nr3)\n    )\n)\nmat &lt;- mat[sample(nr, nr), sample(nc, nc)]\nrownames(mat) &lt;- paste0(\"row\", seq_len(nr))\ncolnames(mat) &lt;- paste0(\"column\", seq_len(nc))\n\n\n\nIt is important to note that the ComplexHeatmap package reorders the dendrogram by default, while align_dendro() in ggalign does not modify the tree layout.\nAnother key difference is in how the two packages treat the starting point. ggalign considers the left-bottom as the starting point, whereas ComplexHeatmap starts from the left-top. When reordering the dendrogram, ComplexHeatmap does so in decreasing order, while ggalign uses an ascending order.\nTo modify colors in the heatmap, you can use the scale_fill_*() function from ggplot2, which provides a flexible way and enriched pallete to adjust color schemes.\n\ndim(mat)\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n# ComplexHeatmap::Heatmap(mat)\n#&gt; [1] 18 24\n\n\nggheatmap(mat) +\n    scale_fill_gradient2(low = \"green\", high = \"red\") +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro() +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\noob argument in the scale_fill_* function can be used to deal with the outliers.\n\nmat2 &lt;- mat\nmat2[1, 1] &lt;- 100000\nggheatmap(mat2) +\n    scale_fill_gradient2(\n        low = \"green\", high = \"red\",\n        limits = c(-2, 2),\n        oob = scales::squish\n    ) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nWe can use align_plots() to arrange them.\n\nh1 &lt;- ggheatmap(mat) +\n    scale_fill_gradient2(name = \"mat\", low = \"green\", high = \"red\") +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n\nh2 &lt;- ggheatmap(mat / 4) +\n    scale_fill_gradient2(\n        name = \"mat/4\", limits = c(-2, 2L),\n        oob = scales::squish,\n        low = \"green\", high = \"red\"\n    ) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n\nh3 &lt;- ggheatmap(abs(mat)) +\n    scale_fill_gradient2(name = \"abs(mat)\", low = \"green\", high = \"red\") +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\nalign_plots(h1, h2, h3, ncol = 2L)\n#&gt; → heatmap built with `geom_tile()`\n#&gt; → heatmap built with `geom_tile()`\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    scale_fill_gradientn(colors = rev(rainbow(10))) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nFor character matrix, you can use ggplot2 discrete filling scales.\n\ndiscrete_mat &lt;- matrix(sample(1:4, 100, replace = TRUE), 10, 10)\ncolors &lt;- structure(1:4, names = c(\"1\", \"2\", \"3\", \"4\")) # black, red, green, blue\nggheatmap(discrete_mat, aes(fill = factor(value))) +\n    scale_fill_manual(values = colors) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\ndiscrete_mat &lt;- matrix(sample(letters[1:4], 100, replace = TRUE), 10, 10)\ncolors &lt;- structure(1:4, names = letters[1:4])\nggheatmap(discrete_mat) +\n    scale_fill_manual(values = colors)\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\nmat_with_na &lt;- mat\nna_index &lt;- sample(c(TRUE, FALSE),\n    nrow(mat) * ncol(mat),\n    replace = TRUE, prob = c(1, 9)\n)\nmat_with_na[na_index] &lt;- NA\nggheatmap(mat_with_na) +\n    scale_fill_gradient2(low = \"blue\", high = \"red\", na.value = \"black\") +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nWe won’t compare the LAB and RGB space. If you want to convert color between different color space, try to use farver pacakge.\nIn ggplot2, you can use panel.border argument in theme() function to control the Heatmap body border.\n\nggheatmap(mat) +\n    theme(\n        axis.text.x = element_text(angle = -60, hjust = 0),\n        panel.border = element_rect(linetype = \"dashed\", fill = NA)\n    ) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nYou can use the filling argument to turn off the heatmap cell filling, allowing you to customize the heatmap body geoms. Use the color aesthetic to specify the cell border color and the linewidth aesthetic to set the border width.\n\nggheatmap(mat, filling = NULL) +\n    geom_tile(aes(fill = value), color = \"white\") +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) &\n    theme(plot.margin = margin())\n\n\n\n\n\n\n\n\nTo draw a blank heatmap body:\n\nggheatmap(mat, filling = NULL) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) &\n    theme(plot.margin = margin())\n\n\n\n\n\n\n\n\n\n\n\nWe can use patch_titles() to add titles around each border of the plot. You can use theme() to control the text appearance.\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    patch_titles(right = \"I am a row title\") +\n    theme(plot.patch_title.right = element_text(face = \"bold\", size = 16)) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    patch_titles(top = \"I am a column title\") +\n    theme(plot.patch_title.top = element_text(face = \"bold\", size = 16)) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# ComplexHeatmap::Heatmap(mat,\n#   name = \"mat\", clustering_distance_rows = \"pearson\",\n#   column_title = \"pre-defined distance method (1 - pearson)\"\n# )\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_dendro(distance = \"pearson\", reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    patch_titles(top = \"pre-defined distance method (1 - pearson)\") +\n    theme(plot.patch_title.top = element_text(face = \"bold\", size = 16)) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\n# ComplexHeatmap::Heatmap(mat,\n#     name = \"mat\", clustering_distance_rows = function(m) dist(m),\n#     column_title = \"a function that calculates distance matrix\"\n# )\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_dendro(distance = dist, reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    patch_titles(top = \"a function that calculates distance matrix\") +\n    theme(plot.patch_title.top = element_text(face = \"bold\", size = 16)) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\n\n\nMethod to perform hierarchical clustering can be specified by method argument, Possible methods are those supported in hclust() function.\n\n# ComplexHeatmap::Heatmap(mat,\n#     name = \"mat\",\n#     clustering_method_rows = \"single\"\n# )\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_dendro(method = \"single\", reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nUse distance = NULL if you don’t want to calculate the distance.\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_dendro(\n        distance = NULL, method = cluster::diana,\n        reorder_dendrogram = TRUE\n    ) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(\n        distance = NULL, method = cluster::agnes,\n        reorder_dendrogram = TRUE\n    ) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\n\n\nIt’s easy for ggalign to color the branches by setting the color mapping, since ggalign will add the cutree() results into the underlying data.\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_dendro(aes(color = branch), k = 2L, reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\n\n\n\nWe can use align_order() to set the order.\n\n# ComplexHeatmap::Heatmap(mat,\n#     name = \"mat\",\n#     row_order = order(as.numeric(gsub(\"row\", \"\", rownames(mat)))),\n#     column_order = order(as.numeric(gsub(\"column\", \"\", colnames(mat)))),\n#     column_title = \"reorder matrix\"\n# )\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_order(as.numeric(gsub(\"row\", \"\", rownames(mat)))) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_order(as.numeric(gsub(\"column\", \"\", colnames(mat)))) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\n\n\nalign_order2() can directly take the seriate() function as the input and extract the ordering information.\n\nmat2 &lt;- max(mat) - mat\nggheatmap(mat2) +\n    scale_fill_gradient2(low = \"blue\", high = \"red\", midpoint = 2L) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_order2(seriation::seriate, method = \"BEA_TSP\") +\n    anno_top(size = unit(15, \"mm\")) +\n    align_order2(seriation::seriate, method = \"BEA_TSP\") &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nThe above code will execute seriate() twice—once for each dimension. However, since a single run of seriate() can provide the ordering for both dimensions, we can manually extract the ordering indices to avoid redundancy.\n\no &lt;- seriation::seriate(mat2, method = \"BEA_TSP\")\nggheatmap(mat2) +\n    scale_fill_gradient2(low = \"blue\", high = \"red\", midpoint = 2L) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_order(seriation::get_order(o, 1L)) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_order(seriation::get_order(o, 2L)) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nFor more use of the seriate() function, please refer to the seriation package.\n\n\n\nggplot2 use scales and theme to control the axis labels, Please see chapter for more details.\n\n# ComplexHeatmap::Heatmap(mat,\n#     name = \"mat\", row_names_side = \"left\", row_dend_side = \"right\",\n#     column_names_side = \"top\", column_dend_side = \"bottom\"\n# )\nggheatmap(mat) +\n    scale_x_continuous(position = \"top\") +\n    scale_y_continuous(position = \"right\") +\n    theme(axis.text.x = element_text(angle = 60, hjust = 0)) +\n    anno_left(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    scale_x_continuous(position = \"top\") +\n    anno_bottom(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    scale_y_continuous(position = \"right\") +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    scale_y_continuous(breaks = NULL) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(\n        axis.text.x = element_text(angle = -60, hjust = 0),\n        axis.text.y = element_text(face = \"bold\", size = 16)\n    ) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(\n        axis.text.x = element_text(angle = -60, hjust = 0),\n        axis.text.y = element_text(\n            face = \"bold\", size = 16,\n            colour = c(rep(\"red\", 10), rep(\"blue\", 8))\n        )\n    ) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; Warning: Vectorized input to `element_text()` is not officially supported.\n#&gt; ℹ Results may be unexpected or may change in future versions of ggplot2.\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_kmeans(2L) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_kmeans(3L) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_kmeans(2L) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_kmeans(3L) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nThe dendrogram was calculated in each group defined by kmeans.\n\n\n\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_group(rep(c(\"A\", \"B\"), 9)) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_group(rep(c(\"C\", \"D\"), 12)) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\n\n\nWhen you splitted by a dendrogram, the cutted height will be indicated with a dashed line.\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(k = 3L, reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(k = 2L, reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(aes(color = branch), k = 3L, reorder_dendrogram = TRUE) +\n    scale_color_brewer(palette = \"Dark2\") +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(k = 2L, reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\n\n\nThe order of the panels always follow the factor level. Note: the merging of dendrogram between ComplexHeatmap and ggalign is a little different.\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_group(rep(LETTERS[1:3], 6)) +\n    align_dendro(aes(color = branch),\n        reorder_dendrogram = TRUE,\n        reorder_group = TRUE,\n        merge_dendrogram = TRUE\n    ) +\n    scale_color_brewer(palette = \"Dark2\") +\n    anno_top(size = unit(15, \"mm\")) +\n    align_group(rep(letters[1:6], 4)) +\n    align_dendro(aes(color = branch),\n        reorder_dendrogram = TRUE,\n        reorder_group = TRUE,\n        merge_dendrogram = TRUE\n    ) +\n    quad_active() -\n    with_quad(theme(strip.text = element_text()), \"tr\") &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_group(rep(LETTERS[1:3], 6)) +\n    align_dendro(aes(color = branch), reorder_dendrogram = TRUE) +\n    scale_color_brewer(palette = \"Dark2\") +\n    anno_top(size = unit(15, \"mm\")) +\n    align_group(rep(letters[1:6], 4)) +\n    align_dendro(aes(color = branch), reorder_dendrogram = TRUE) +\n    quad_active() -\n    with_quad(theme(strip.text = element_text()), \"tr\") &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\n\n\nBy default, the facet strip text is removed. You can override this behavior with theme(strip.text = element_text()). Since align_group() does not create a new plot, the panel title can only be added to the heatmap plot.\nwaiting for complete …\n\n\n\n\nggh4x::facet_grid2(strip = ggh4x::strip_themed(\n    background_x = list(\n        element_rect(fill = \"red\"),\n        element_rect(fill = \"blue\"),\n        element_rect(fill = \"green\")\n    )\n))\n#&gt; &lt;ggproto object: Class FacetGrid2, FacetGrid, Facet, gg&gt;\n#&gt;     attach_axes: function\n#&gt;     attach_strips: function\n#&gt;     compute_layout: function\n#&gt;     draw_back: function\n#&gt;     draw_front: function\n#&gt;     draw_labels: function\n#&gt;     draw_panel_content: function\n#&gt;     draw_panels: function\n#&gt;     finish_data: function\n#&gt;     finish_panels: function\n#&gt;     format_strip_labels: function\n#&gt;     init_gtable: function\n#&gt;     init_scales: function\n#&gt;     map_data: function\n#&gt;     params: list\n#&gt;     set_panel_size: function\n#&gt;     setup_aspect_ratio: function\n#&gt;     setup_axes: function\n#&gt;     setup_data: function\n#&gt;     setup_panel_params: function\n#&gt;     setup_panel_table: function\n#&gt;     setup_params: function\n#&gt;     shrink: TRUE\n#&gt;     strip: &lt;ggproto object: Class StripElemental, Strip, gg&gt;\n#&gt;         assemble_strip: function\n#&gt;         build_strip: function\n#&gt;         clip: inherit\n#&gt;         draw_labels: function\n#&gt;         elements: list\n#&gt;         finish_strip: function\n#&gt;         get_strips: function\n#&gt;         given_elements: list\n#&gt;         incorporate_grid: function\n#&gt;         incorporate_wrap: function\n#&gt;         init_strip: function\n#&gt;         params: list\n#&gt;         setup: function\n#&gt;         setup_elements: function\n#&gt;         strips: list\n#&gt;         super:  &lt;ggproto object: Class StripElemental, Strip, gg&gt;\n#&gt;     train_scales: function\n#&gt;     vars: function\n#&gt;     vars_combine: function\n#&gt;     super:  &lt;ggproto object: Class FacetGrid2, FacetGrid, Facet, gg&gt;"
  },
  {
    "objectID": "complexheatmap/single-heatmap.html#colors",
    "href": "complexheatmap/single-heatmap.html#colors",
    "title": "A Single Heatmap",
    "section": "",
    "text": "It is important to note that the ComplexHeatmap package reorders the dendrogram by default, while align_dendro() in ggalign does not modify the tree layout.\nAnother key difference is in how the two packages treat the starting point. ggalign considers the left-bottom as the starting point, whereas ComplexHeatmap starts from the left-top. When reordering the dendrogram, ComplexHeatmap does so in decreasing order, while ggalign uses an ascending order.\nTo modify colors in the heatmap, you can use the scale_fill_*() function from ggplot2, which provides a flexible way and enriched pallete to adjust color schemes.\n\ndim(mat)\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n# ComplexHeatmap::Heatmap(mat)\n#&gt; [1] 18 24\n\n\nggheatmap(mat) +\n    scale_fill_gradient2(low = \"green\", high = \"red\") +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro() +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\noob argument in the scale_fill_* function can be used to deal with the outliers.\n\nmat2 &lt;- mat\nmat2[1, 1] &lt;- 100000\nggheatmap(mat2) +\n    scale_fill_gradient2(\n        low = \"green\", high = \"red\",\n        limits = c(-2, 2),\n        oob = scales::squish\n    ) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nWe can use align_plots() to arrange them.\n\nh1 &lt;- ggheatmap(mat) +\n    scale_fill_gradient2(name = \"mat\", low = \"green\", high = \"red\") +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n\nh2 &lt;- ggheatmap(mat / 4) +\n    scale_fill_gradient2(\n        name = \"mat/4\", limits = c(-2, 2L),\n        oob = scales::squish,\n        low = \"green\", high = \"red\"\n    ) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n\nh3 &lt;- ggheatmap(abs(mat)) +\n    scale_fill_gradient2(name = \"abs(mat)\", low = \"green\", high = \"red\") +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\nalign_plots(h1, h2, h3, ncol = 2L)\n#&gt; → heatmap built with `geom_tile()`\n#&gt; → heatmap built with `geom_tile()`\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    scale_fill_gradientn(colors = rev(rainbow(10))) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nFor character matrix, you can use ggplot2 discrete filling scales.\n\ndiscrete_mat &lt;- matrix(sample(1:4, 100, replace = TRUE), 10, 10)\ncolors &lt;- structure(1:4, names = c(\"1\", \"2\", \"3\", \"4\")) # black, red, green, blue\nggheatmap(discrete_mat, aes(fill = factor(value))) +\n    scale_fill_manual(values = colors) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\ndiscrete_mat &lt;- matrix(sample(letters[1:4], 100, replace = TRUE), 10, 10)\ncolors &lt;- structure(1:4, names = letters[1:4])\nggheatmap(discrete_mat) +\n    scale_fill_manual(values = colors)\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\nmat_with_na &lt;- mat\nna_index &lt;- sample(c(TRUE, FALSE),\n    nrow(mat) * ncol(mat),\n    replace = TRUE, prob = c(1, 9)\n)\nmat_with_na[na_index] &lt;- NA\nggheatmap(mat_with_na) +\n    scale_fill_gradient2(low = \"blue\", high = \"red\", na.value = \"black\") +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nWe won’t compare the LAB and RGB space. If you want to convert color between different color space, try to use farver pacakge.\nIn ggplot2, you can use panel.border argument in theme() function to control the Heatmap body border.\n\nggheatmap(mat) +\n    theme(\n        axis.text.x = element_text(angle = -60, hjust = 0),\n        panel.border = element_rect(linetype = \"dashed\", fill = NA)\n    ) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nYou can use the filling argument to turn off the heatmap cell filling, allowing you to customize the heatmap body geoms. Use the color aesthetic to specify the cell border color and the linewidth aesthetic to set the border width.\n\nggheatmap(mat, filling = NULL) +\n    geom_tile(aes(fill = value), color = \"white\") +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) &\n    theme(plot.margin = margin())\n\n\n\n\n\n\n\n\nTo draw a blank heatmap body:\n\nggheatmap(mat, filling = NULL) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) &\n    theme(plot.margin = margin())"
  },
  {
    "objectID": "complexheatmap/single-heatmap.html#titles",
    "href": "complexheatmap/single-heatmap.html#titles",
    "title": "A Single Heatmap",
    "section": "",
    "text": "We can use patch_titles() to add titles around each border of the plot. You can use theme() to control the text appearance.\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    patch_titles(right = \"I am a row title\") +\n    theme(plot.patch_title.right = element_text(face = \"bold\", size = 16)) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    patch_titles(top = \"I am a column title\") +\n    theme(plot.patch_title.top = element_text(face = \"bold\", size = 16)) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`"
  },
  {
    "objectID": "complexheatmap/single-heatmap.html#clustering",
    "href": "complexheatmap/single-heatmap.html#clustering",
    "title": "A Single Heatmap",
    "section": "",
    "text": "# ComplexHeatmap::Heatmap(mat,\n#   name = \"mat\", clustering_distance_rows = \"pearson\",\n#   column_title = \"pre-defined distance method (1 - pearson)\"\n# )\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_dendro(distance = \"pearson\", reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    patch_titles(top = \"pre-defined distance method (1 - pearson)\") +\n    theme(plot.patch_title.top = element_text(face = \"bold\", size = 16)) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\n# ComplexHeatmap::Heatmap(mat,\n#     name = \"mat\", clustering_distance_rows = function(m) dist(m),\n#     column_title = \"a function that calculates distance matrix\"\n# )\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_dendro(distance = dist, reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    patch_titles(top = \"a function that calculates distance matrix\") +\n    theme(plot.patch_title.top = element_text(face = \"bold\", size = 16)) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\n\n\nMethod to perform hierarchical clustering can be specified by method argument, Possible methods are those supported in hclust() function.\n\n# ComplexHeatmap::Heatmap(mat,\n#     name = \"mat\",\n#     clustering_method_rows = \"single\"\n# )\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_dendro(method = \"single\", reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nUse distance = NULL if you don’t want to calculate the distance.\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_dendro(\n        distance = NULL, method = cluster::diana,\n        reorder_dendrogram = TRUE\n    ) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(\n        distance = NULL, method = cluster::agnes,\n        reorder_dendrogram = TRUE\n    ) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\n\n\nIt’s easy for ggalign to color the branches by setting the color mapping, since ggalign will add the cutree() results into the underlying data.\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_dendro(aes(color = branch), k = 2L, reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`"
  },
  {
    "objectID": "complexheatmap/single-heatmap.html#set-row-and-column-orders",
    "href": "complexheatmap/single-heatmap.html#set-row-and-column-orders",
    "title": "A Single Heatmap",
    "section": "",
    "text": "We can use align_order() to set the order.\n\n# ComplexHeatmap::Heatmap(mat,\n#     name = \"mat\",\n#     row_order = order(as.numeric(gsub(\"row\", \"\", rownames(mat)))),\n#     column_order = order(as.numeric(gsub(\"column\", \"\", colnames(mat)))),\n#     column_title = \"reorder matrix\"\n# )\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_order(as.numeric(gsub(\"row\", \"\", rownames(mat)))) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_order(as.numeric(gsub(\"column\", \"\", colnames(mat)))) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`"
  },
  {
    "objectID": "complexheatmap/single-heatmap.html#seriation",
    "href": "complexheatmap/single-heatmap.html#seriation",
    "title": "A Single Heatmap",
    "section": "",
    "text": "align_order2() can directly take the seriate() function as the input and extract the ordering information.\n\nmat2 &lt;- max(mat) - mat\nggheatmap(mat2) +\n    scale_fill_gradient2(low = \"blue\", high = \"red\", midpoint = 2L) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_order2(seriation::seriate, method = \"BEA_TSP\") +\n    anno_top(size = unit(15, \"mm\")) +\n    align_order2(seriation::seriate, method = \"BEA_TSP\") &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nThe above code will execute seriate() twice—once for each dimension. However, since a single run of seriate() can provide the ordering for both dimensions, we can manually extract the ordering indices to avoid redundancy.\n\no &lt;- seriation::seriate(mat2, method = \"BEA_TSP\")\nggheatmap(mat2) +\n    scale_fill_gradient2(low = \"blue\", high = \"red\", midpoint = 2L) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_order(seriation::get_order(o, 1L)) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_order(seriation::get_order(o, 2L)) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nFor more use of the seriate() function, please refer to the seriation package."
  },
  {
    "objectID": "complexheatmap/single-heatmap.html#dimension-labels",
    "href": "complexheatmap/single-heatmap.html#dimension-labels",
    "title": "A Single Heatmap",
    "section": "",
    "text": "ggplot2 use scales and theme to control the axis labels, Please see chapter for more details.\n\n# ComplexHeatmap::Heatmap(mat,\n#     name = \"mat\", row_names_side = \"left\", row_dend_side = \"right\",\n#     column_names_side = \"top\", column_dend_side = \"bottom\"\n# )\nggheatmap(mat) +\n    scale_x_continuous(position = \"top\") +\n    scale_y_continuous(position = \"right\") +\n    theme(axis.text.x = element_text(angle = 60, hjust = 0)) +\n    anno_left(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    scale_x_continuous(position = \"top\") +\n    anno_bottom(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    scale_y_continuous(position = \"right\") +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    scale_y_continuous(breaks = NULL) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(\n        axis.text.x = element_text(angle = -60, hjust = 0),\n        axis.text.y = element_text(face = \"bold\", size = 16)\n    ) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(\n        axis.text.x = element_text(angle = -60, hjust = 0),\n        axis.text.y = element_text(\n            face = \"bold\", size = 16,\n            colour = c(rep(\"red\", 10), rep(\"blue\", 8))\n        )\n    ) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; Warning: Vectorized input to `element_text()` is not officially supported.\n#&gt; ℹ Results may be unexpected or may change in future versions of ggplot2.\n#&gt; → heatmap built with `geom_tile()`"
  },
  {
    "objectID": "complexheatmap/single-heatmap.html#heatmap-split",
    "href": "complexheatmap/single-heatmap.html#heatmap-split",
    "title": "A Single Heatmap",
    "section": "",
    "text": "ggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_kmeans(2L) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_kmeans(3L) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_kmeans(2L) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_kmeans(3L) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nThe dendrogram was calculated in each group defined by kmeans.\n\n\n\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_group(rep(c(\"A\", \"B\"), 9)) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_group(rep(c(\"C\", \"D\"), 12)) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\n\n\nWhen you splitted by a dendrogram, the cutted height will be indicated with a dashed line.\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(k = 3L, reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(k = 2L, reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(aes(color = branch), k = 3L, reorder_dendrogram = TRUE) +\n    scale_color_brewer(palette = \"Dark2\") +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(k = 2L, reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\n\n\nThe order of the panels always follow the factor level. Note: the merging of dendrogram between ComplexHeatmap and ggalign is a little different.\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_group(rep(LETTERS[1:3], 6)) +\n    align_dendro(aes(color = branch),\n        reorder_dendrogram = TRUE,\n        reorder_group = TRUE,\n        merge_dendrogram = TRUE\n    ) +\n    scale_color_brewer(palette = \"Dark2\") +\n    anno_top(size = unit(15, \"mm\")) +\n    align_group(rep(letters[1:6], 4)) +\n    align_dendro(aes(color = branch),\n        reorder_dendrogram = TRUE,\n        reorder_group = TRUE,\n        merge_dendrogram = TRUE\n    ) +\n    quad_active() -\n    with_quad(theme(strip.text = element_text()), \"tr\") &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_group(rep(LETTERS[1:3], 6)) +\n    align_dendro(aes(color = branch), reorder_dendrogram = TRUE) +\n    scale_color_brewer(palette = \"Dark2\") +\n    anno_top(size = unit(15, \"mm\")) +\n    align_group(rep(letters[1:6], 4)) +\n    align_dendro(aes(color = branch), reorder_dendrogram = TRUE) +\n    quad_active() -\n    with_quad(theme(strip.text = element_text()), \"tr\") &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\n\n\nBy default, the facet strip text is removed. You can override this behavior with theme(strip.text = element_text()). Since align_group() does not create a new plot, the panel title can only be added to the heatmap plot.\nwaiting for complete …\n\n\n\n\nggh4x::facet_grid2(strip = ggh4x::strip_themed(\n    background_x = list(\n        element_rect(fill = \"red\"),\n        element_rect(fill = \"blue\"),\n        element_rect(fill = \"green\")\n    )\n))\n#&gt; &lt;ggproto object: Class FacetGrid2, FacetGrid, Facet, gg&gt;\n#&gt;     attach_axes: function\n#&gt;     attach_strips: function\n#&gt;     compute_layout: function\n#&gt;     draw_back: function\n#&gt;     draw_front: function\n#&gt;     draw_labels: function\n#&gt;     draw_panel_content: function\n#&gt;     draw_panels: function\n#&gt;     finish_data: function\n#&gt;     finish_panels: function\n#&gt;     format_strip_labels: function\n#&gt;     init_gtable: function\n#&gt;     init_scales: function\n#&gt;     map_data: function\n#&gt;     params: list\n#&gt;     set_panel_size: function\n#&gt;     setup_aspect_ratio: function\n#&gt;     setup_axes: function\n#&gt;     setup_data: function\n#&gt;     setup_panel_params: function\n#&gt;     setup_panel_table: function\n#&gt;     setup_params: function\n#&gt;     shrink: TRUE\n#&gt;     strip: &lt;ggproto object: Class StripElemental, Strip, gg&gt;\n#&gt;         assemble_strip: function\n#&gt;         build_strip: function\n#&gt;         clip: inherit\n#&gt;         draw_labels: function\n#&gt;         elements: list\n#&gt;         finish_strip: function\n#&gt;         get_strips: function\n#&gt;         given_elements: list\n#&gt;         incorporate_grid: function\n#&gt;         incorporate_wrap: function\n#&gt;         init_strip: function\n#&gt;         params: list\n#&gt;         setup: function\n#&gt;         setup_elements: function\n#&gt;         strips: list\n#&gt;         super:  &lt;ggproto object: Class StripElemental, Strip, gg&gt;\n#&gt;     train_scales: function\n#&gt;     vars: function\n#&gt;     vars_combine: function\n#&gt;     super:  &lt;ggproto object: Class FacetGrid2, FacetGrid, Facet, gg&gt;"
  },
  {
    "objectID": "basics/heatmap-with-annotations.html",
    "href": "basics/heatmap-with-annotations.html",
    "title": "Heatmap with annotations",
    "section": "",
    "text": "Heatmap with annotations\n\nlibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\nset.seed(123)\nmat &lt;- matrix(\n    rnorm(100, mean = 0, sd = 2),\n    nrow = 10, ncol = 10,\n    dimnames = list(paste0(\"G\", 1:10), paste0(\"S\", 1:10))\n)\n\n\nggheatmap(mat) +\n    scale_fill_viridis_c() +\n    anno_right(size = 0.3) +\n    align_dendro() +\n    anno_left(size = 0.3) +\n    ggalign(rowSums) +\n    geom_bar(aes(x = value, y = .y, fill = value),\n        orientation = \"y\", stat = \"identity\"\n    ) +\n    scale_fill_viridis_c(option = \"A\")\n#&gt; → heatmap built with `geom_tile()`"
  },
  {
    "objectID": "basics/heatmap-with-ordering-weights.html",
    "href": "basics/heatmap-with-ordering-weights.html",
    "title": "Heatmap with Ordering weights",
    "section": "",
    "text": "Heatmap with Ordering weights\n\nlibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\nset.seed(123)\n# Prepare heatmap matrix\nmat &lt;- matrix(\n    rnorm(100, mean = 0, sd = 2),\n    nrow = 10, ncol = 10,\n    dimnames = list(paste0(\"G\", 1:10), paste0(\"S\", 1:10))\n)\n\n\nggheatmap(mat) +\n    anno_left() +\n    align_order(rowMeans)\n#&gt; → heatmap built with `geom_tile()`"
  },
  {
    "objectID": "basics/heatmap-with-kmeans.html",
    "href": "basics/heatmap-with-kmeans.html",
    "title": "Heatmap with Kmeans",
    "section": "",
    "text": "Heatmap with Kmeans\n\nlibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\nset.seed(123)\n# Prepare heatmap matrix\nmat &lt;- matrix(\n    rnorm(100, mean = 0, sd = 2),\n    nrow = 10, ncol = 10,\n    dimnames = list(paste0(\"G\", 1:10), paste0(\"S\", 1:10))\n)\n\n\nggheatmap(mat) +\n    anno_top() +\n    align_kmeans(3)\n#&gt; → heatmap built with `geom_tile()`"
  },
  {
    "objectID": "basics.html",
    "href": "basics.html",
    "title": "gallery",
    "section": "",
    "text": "Heatmap\n\n\n\nJul 30, 2025\n\n\n\n\n\n\n\n\n\n\n\nHeatmap with Group variables\n\n\n\nJul 30, 2025\n\n\n\n\n\n\n\n\n\n\n\nHeatmap with Kmeans\n\n\n\nJul 30, 2025\n\n\n\n\n\n\n\n\n\n\n\nHeatmap with Ordering weights\n\n\n\nJul 30, 2025\n\n\n\n\n\n\n\n\n\n\n\nHeatmap with annotations\n\n\n\nJul 30, 2025\n\n\n\n\n\n\n\n\n\n\n\nHeatmap with dendrogram\n\n\n\nJul 30, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "real-world-data/pan-cancer-immune-pathways.html",
    "href": "real-world-data/pan-cancer-immune-pathways.html",
    "title": "Disturbance of Immune-Related Pathways between Normal and Tumor Tissues in Pan-cancer",
    "section": "",
    "text": "Disturbance of Immune-Related Pathways between Normal and Tumor Tissues in Pan-cancer\nData was downloaded from https://pmc.ncbi.nlm.nih.gov/articles/PMC9856581/#app1-cancers-15-00342\nWe randomly selected 5 pathways for simplicity. The data preparation code is collapsed in the source but can be expanded for inspection.\n\n\nCode\n# Read data from the supplementary Excel file\ndata &lt;- readxl::read_xlsx(\"rawdata/pan-cancer-immune-pathways.xlsx\", skip = 1L)\n#&gt; New names:\n#&gt; • `` -&gt; `...3`\n#&gt; • `` -&gt; `...5`\n#&gt; • `` -&gt; `...7`\n#&gt; • `` -&gt; `...9`\n#&gt; • `` -&gt; `...11`\n#&gt; • `` -&gt; `...13`\n#&gt; • `` -&gt; `...15`\n#&gt; • `` -&gt; `...17`\n#&gt; • `` -&gt; `...19`\n#&gt; • `` -&gt; `...21`\n#&gt; • `` -&gt; `...23`\n#&gt; • `` -&gt; `...25`\n#&gt; • `` -&gt; `...27`\n#&gt; • `` -&gt; `...29`\n#&gt; • `` -&gt; `...31`\n#&gt; • `` -&gt; `...33`\n#&gt; • `` -&gt; `...35`\n#&gt; • `` -&gt; `...37`\n#&gt; • `` -&gt; `...39`\n#&gt; • `` -&gt; `...41`\n#&gt; • `` -&gt; `...43`\n#&gt; • `` -&gt; `...45`\n#&gt; • `` -&gt; `...47`\n#&gt; • `` -&gt; `...49`\n#&gt; • `` -&gt; `...51`\nset.seed(3L)\n\n# Randomly select 5 pathways (rows 2–18 cover the main data)\nselected &lt;- sample(2:18, 5)\n\n# Extract logFC and adjusted p-values for the selected pathways\nlogFC &lt;- data[selected, c(1, which(as.character(data[1, ]) == \"logFC\"))]\nadj.P &lt;- data[selected, c(1, which(as.character(data[1, ]) == \"adj.P\"))]\nnames(adj.P) &lt;- names(logFC)\n\n# Convert to numeric matrix: pathways as columns, tumor as rows\nlogFC &lt;- dplyr::mutate(logFC, dplyr::across(!pathway, as.numeric)) |&gt;\n    tibble::column_to_rownames(var = \"pathway\") |&gt;\n    as.matrix() |&gt;\n    t()\nadj.P &lt;- dplyr::mutate(adj.P, dplyr::across(!pathway, as.numeric)) |&gt;\n    tibble::column_to_rownames(var = \"pathway\") |&gt;\n    as.matrix() |&gt;\n    t()\n\n\n\nlibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\ncircle_discrete(logFC,\n    radial = coord_radial(start = pi / 2, end = pi * 2, expand = FALSE),\n    theme = theme(\n        plot.margin = margin(l = 5, t = 5, b = 6, unit = \"mm\"),\n        legend.box.spacing = unit(5, \"mm\")\n    ),\n    sector_spacing = 5 * pi / 180\n) +\n    # Align dendrogram above the radial sectors, cluster conditions into 5 groups\n    align_dendro(aes(color = branch), k = 5L, size = 1) +\n    theme_no_axes(\"y\") +\n    scale_color_brewer(\n        palette = \"Dark2\",\n        guide = guide_legend(theme = theme(\n            legend.text = element_text(size = 18),\n            legend.title = element_text(face = \"bold\", size = 16)\n        ))\n    ) +\n\n    # add heatmap plot\n    ggalign(mapping = aes(y = .column_names, fill = value)) +\n    geom_tile(width = 1, height = 1) +\n    geom_text(aes(label = \"*\"), data = function(dd) {\n        dd$pvalue &lt;- adj.P[cbind(dd$.row_index, dd$.column_index)]\n        dplyr::filter(dd, pvalue &lt; 0.05)\n    }) +\n    scale_fill_gradient2(\n        low = \"blue\", high = \"red\",\n        name = \"logFC\",\n        limits = c(-1, 1),\n        breaks = c(-0.5, 0, 0.5),\n        guide = guide_colorbar(theme = theme(\n            legend.text = element_text(size = 18),\n            legend.title = element_text(face = \"bold\", size = 16)\n        ))\n    ) +\n    theme(\n        axis.text.r = element_text(family = \"Helvetica\", size = 22),\n        axis.text.theta = element_text(family = \"Helvetica\", size = 15)\n    ) +\n    guides(\n        r = \"none\", r.sec = \"axis\",\n        theta = guide_axis_theta(angle = 0)\n    ) &\n    theme(\n        text = element_text(family = \"Helvetica\"),\n        legend.text = element_text(size = 12),\n        legend.title = element_text(face = \"bold\", size = 14)\n    )"
  },
  {
    "objectID": "real-world-data/tcga-laml-oncoplot.html",
    "href": "real-world-data/tcga-laml-oncoplot.html",
    "title": "Oncoplot of TCGA LAML Mutation Data",
    "section": "",
    "text": "Oncoplot of TCGA LAML Mutation Data\nWe utilize the TCGA LAML mutation dataset included in the R maftools package.\nTo reduce complexity, we randomly sample 20 tumor samples. The data preparation code is initially collapsed in the source but can be expanded for inspection.\n\n\nCode\n# load data from `maftools`\nlaml.maf &lt;- system.file(\"extdata\", \"tcga_laml.maf.gz\", package = \"maftools\")\n# clinical information containing survival information and histology. This is optional\nlaml.clin &lt;- system.file(\"extdata\", \"tcga_laml_annot.tsv\", package = \"maftools\")\nlaml &lt;- maftools::read.maf(\n    maf = laml.maf,\n    clinicalData = laml.clin,\n    verbose = FALSE\n)\nset.seed(25) # 2, 11, 20, 25, 29, 32\nnew_laml &lt;- maftools::subsetMaf(laml,\n    tsb = sample(maftools::getClinicalData(laml)$Tumor_Sample_Barcode, 20)\n)\n#&gt; -Processing clinical data\n\n\n\nlibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\nggoncoplot(\n    new_laml,\n    n_top = 10, collapse_vars = FALSE, filling = FALSE,\n    remove_empty_samples = FALSE\n) +\n    geom_subtile(aes(fill = value),\n        ncol = 1L, height = 0.8,\n        show.legend = TRUE\n    ) +\n    theme_no_axes(\"x\") +\n\n    # add top annotation -------------------------------\n    anno_top(size = 0.2) +\n    ggalign(\n        data = function(data) {\n            vars &lt;- ggalign_lvls(data)\n            data &lt;- ggalign_attr(data, \"sample_summary\")\n            as.matrix(data[intersect(names(data), vars)])\n        }\n    ) +\n    scheme_data(function(data) {\n        data$.column_names &lt;- factor(data$.column_names, ggalign_lvls(data))\n        data\n    }) +\n    geom_bar(aes(.x, value, fill = .column_names),\n        stat = \"identity\"\n    ) +\n    guides(fill = \"none\") +\n    # labs(fill = \"top\") +\n    ylab(\"TMB\") +\n    scale_y_continuous(breaks = scales::breaks_pretty(2L)) +\n\n    # add right annotation -----------------------------\n    anno_right(size = 0.2) -\n    # remove bottom spaces of the right annotation when aligning\n    scheme_align(free_spaces = \"b\") +\n\n    # add the text percent for the alterated samples in the right annotation\n    ggalign(data = function(data) {\n        # Atomic vector will be put in the `value` column of the data frame.\n        ggalign_attr(data, \"gene_summary\")$AlteredSamples /\n            ggalign_attr(data, \"n_samples\")\n    }) +\n    geom_text(aes(1, label = scales::label_percent()(value)),\n        hjust = 1.2, size = 5, family = \"Helvetica\"\n    ) +\n    scale_x_continuous(\n        expand = expansion(),\n        name = NULL, breaks = NULL,\n        limits = c(0, 1)\n    ) +\n    theme(plot.margin = margin()) +\n\n    # add the bar plot in the right annotation\n    ggalign(data = function(data) {\n        vars &lt;- ggalign_lvls(data)\n        data &lt;- ggalign_attr(data, \"variant_weights\")\n        as.matrix(data[intersect(names(data), vars)])\n    }) +\n    scheme_data(function(data) {\n        data$.column_names &lt;- factor(data$.column_names, ggalign_lvls(data))\n        data\n    }) +\n    geom_bar(aes(value, fill = .column_names),\n        stat = \"identity\",\n        orientation = \"y\"\n    ) +\n    guides(fill = \"none\") +\n    # labs(fill = \"right\") +\n    xlab(\"Variant weights\") +\n    scale_x_continuous(breaks = scales::breaks_pretty(1)) +\n    theme(\n        axis.line.y = element_line(),\n        axis.text.x = element_text(size = 18),\n        axis.title.x = element_blank()\n    ) -\n    # we apply the scale mapping to\n    # - the top and right annotation: `position = \"tr\"`\n    # - the main plot: `main = TRUE`\n    with_quad(\n        scale_fill_brewer(\n            \"Mutations\",\n            palette = \"Dark2\",\n            na.translate = FALSE, drop = FALSE\n        ),\n        position = \"tr\",\n        main = TRUE\n    ) +\n\n    # add bottom annotation ----------------------------\n    anno_bottom(size = 0.2) +\n    # add bar plot in the bottom annotation\n    ggalign(data = function(data) {\n        data &lt;- ggalign_attr(data, \"titv\")$fraction.contribution\n        as.matrix(data[-1L])\n    }) +\n    geom_bar(aes(y = value, fill = .column_names), stat = \"identity\") +\n    ylab(\"Ti/Tv\") +\n    scale_y_continuous(breaks = scales::breaks_pretty(3L)) +\n    scale_fill_brewer(\"Ti/Tv\", palette = \"Set2\", na.translate = FALSE) -\n    with_quad(\n        theme(\n            axis.text.y = element_text(size = 18),\n            axis.title.y = element_text(size = 20, face = \"bold\"),\n            legend.text = element_text(size = 12, colour = \"black\"),\n            legend.title = element_text(size = 20)\n        )\n    ) &\n    theme(\n        plot.margin = margin(b = 5),\n        text = element_text(family = \"Helvetica\"),\n        plot.background = element_blank()\n    )\n#&gt; `geom_subtile()` subdivide tile into a maximal of 3 rectangles"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Basics",
    "section": "",
    "text": "Basics\n\n\n\n\n\n\n\n\nHeatmap\n\n\n\nJul 30, 2025\n\n\n\n\n\n\n\n\n\n\n\nHeatmap with Group variables\n\n\n\nJul 30, 2025\n\n\n\n\n\n\n\n\n\n\n\nHeatmap with Kmeans\n\n\n\nJul 30, 2025\n\n\n\n\n\n\n\n\n\n\n\nHeatmap with Ordering weights\n\n\n\nJul 30, 2025\n\n\n\n\n\n\n\n\n\n\n\nHeatmap with annotations\n\n\n\nJul 30, 2025\n\n\n\n\n\n\n\n\n\n\n\nHeatmap with dendrogram\n\n\n\nJul 30, 2025\n\n\n\n\n\n\nNo matching items\n\n\n\nAdvanced\n\n\n\n\nNo matching items\n\n\n\nReal World Data\n\n\n\n\n\n\n\n\nDisturbance of Immune-Related Pathways between Normal and Tumor Tissues in Pan-cancer\n\n\n\nJul 30, 2025\n\n\n\n\n\n\n\n\n\n\n\nOncoplot of TCGA LAML Mutation Data\n\n\n\nJul 30, 2025\n\n\n\n\n\n\nNo matching items\n\n\n\nComplexHeatmap\nReproducing heatmaps from the ComplexHeatmap book using ggalign.\n\n\n\n\n\n\n\n\nA Single Heatmap\n\n\n\nJul 30, 2025\n\n\n\n\n\n\n\n\n\n\n\nMore examples\n\n\n\nJul 30, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "basics/heatmap-with-dendrogram.html",
    "href": "basics/heatmap-with-dendrogram.html",
    "title": "Heatmap with dendrogram",
    "section": "",
    "text": "Heatmap with dendrogram\n\nlibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\nset.seed(123)\n# Prepare heatmap matrix\nmat &lt;- matrix(\n    rnorm(100, mean = 0, sd = 2),\n    nrow = 10, ncol = 10,\n    dimnames = list(paste0(\"G\", 1:10), paste0(\"S\", 1:10))\n)\n\n\nggheatmap(mat) +\n    anno_top() +\n    align_dendro(aes(color = branch), k = 3) +\n    geom_point(aes(color = branch, y = y)) +\n    scale_color_brewer(palette = \"Dark2\")\n#&gt; → heatmap built with `geom_tile()`"
  },
  {
    "objectID": "basics/heatmap-with-group-variables.html",
    "href": "basics/heatmap-with-group-variables.html",
    "title": "Heatmap with Group variables",
    "section": "",
    "text": "Heatmap with Group variables\n\nlibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\nset.seed(123)\n# Prepare heatmap matrix\nmat &lt;- matrix(\n    rnorm(100, mean = 0, sd = 2),\n    nrow = 10, ncol = 10,\n    dimnames = list(paste0(\"G\", 1:10), paste0(\"S\", 1:10))\n)\n\n\nggheatmap(mat) +\n    anno_top() +\n    align_group(sample(letters[1:4], ncol(mat), replace = TRUE))\n#&gt; → heatmap built with `geom_tile()`"
  },
  {
    "objectID": "basics/heatmap.html",
    "href": "basics/heatmap.html",
    "title": "Heatmap",
    "section": "",
    "text": "Heatmap\n\nlibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\nset.seed(123)\n# Prepare heatmap matrix\nmat &lt;- matrix(\n    rnorm(100, mean = 0, sd = 2),\n    nrow = 10, ncol = 10,\n    dimnames = list(paste0(\"G\", 1:10), paste0(\"S\", 1:10))\n)\n\n\nggheatmap(mat) + scale_fill_viridis_c()\n#&gt; → heatmap built with `geom_tile()`"
  },
  {
    "objectID": "complexheatmap/more-examples.html",
    "href": "complexheatmap/more-examples.html",
    "title": "More examples",
    "section": "",
    "text": "Code\nlibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\nIn this section, we’ll use ggalign to draw all the heatmap in https://jokergoo.github.io/ComplexHeatmap-reference/book/more-examples.html.\n\n\n\nexpr &lt;- read_example(\"gene_expression.rds\")\nmat &lt;- as.matrix(expr[, grep(\"cell\", colnames(expr))])\nbase_mean &lt;- rowMeans(mat)\nmat_scaled &lt;- t(apply(mat, 1, scale))\ntype &lt;- gsub(\"s\\\\d+_\", \"\", colnames(mat))\n\nheat1 &lt;- ggheatmap(mat_scaled) -\n    scheme_align(free_spaces = \"l\") +\n    scale_y_continuous(breaks = NULL) +\n    scale_fill_viridis_c(option = \"magma\") +\n    # add dendrogram for this heatmap\n    anno_top() +\n    align_dendro() +\n    # add a block for the heatmap column\n    ggalign(data = type, size = unit(1, \"cm\")) +\n    geom_tile(aes(y = 1, fill = factor(value))) +\n    scale_y_continuous(breaks = NULL, name = NULL) +\n    scale_fill_brewer(\n        palette = \"Set1\", name = \"type\",\n        guide = guide_legend(position = \"top\")\n    )\n\nheat2 &lt;- ggheatmap(base_mean, width = unit(2, \"cm\")) +\n    scale_y_continuous(breaks = NULL) +\n    scale_x_continuous(name = \"base mean\", breaks = FALSE) +\n    scale_fill_gradientn(colours = c(\"#2600D1FF\", \"white\", \"#EE3F3FFF\")) +\n    # set the active context of the heatmap to the top\n    # and set the size of the top stack\n    anno_top(size = unit(4, \"cm\")) +\n    # add box plot in the heatmap top\n    ggalign() +\n    geom_boxplot(aes(y = value, fill = factor(.extra_panel))) +\n    scale_x_continuous(expand = expansion(), breaks = NULL) +\n    scale_fill_brewer(\n        palette = \"Dark2\", name = \"base mean\",\n        guide = guide_legend(position = \"top\")\n    ) +\n    theme(axis.title.y = element_blank())\n\nheat3 &lt;- ggheatmap(expr$type, width = unit(2, \"cm\")) +\n    scale_fill_brewer(palette = \"Set3\", name = \"gene type\") +\n    scale_x_continuous(breaks = NULL, name = \"gene type\") +\n    # add barplot in the top annotation, and remove the spaces in the y-axis\n    anno_top() -\n    scheme_align(free_spaces = \"lr\") +\n    ggalign() +\n    geom_bar(\n        aes(.extra_panel, fill = factor(value)),\n        position = position_fill()\n    ) +\n    scale_y_continuous(expand = expansion()) +\n    scale_fill_brewer(palette = \"Set3\", name = \"gene type\", guide = \"none\") -\n    scheme_theme(plot.margin = margin())\n\nstack_alignh(mat_scaled) +\n    stack_active(sizes = c(0.2, 1, 1)) +\n    # group stack rows into 5 groups\n    align_kmeans(centers = 5L) +\n    # add a block plot for each group in the stack\n    ggalign(size = unit(1, \"cm\"), data = NULL) +\n    geom_tile(aes(x = 1, fill = factor(.panel))) +\n    scale_fill_brewer(palette = \"Dark2\", name = \"Kmeans group\") +\n    scale_x_continuous(breaks = NULL, name = NULL) +\n    # add a heatmap plot in the stack\n    heat1 +\n    # add another heatmap in the stack\n    heat2 +\n    # we move into the stack layout\n    stack_active() +\n    # add a point plot\n    ggalign(data = expr$length, size = unit(2, \"cm\")) +\n    geom_point(aes(x = value)) +\n    labs(x = \"length\") +\n    theme(\n        panel.border = element_rect(fill = NA),\n        axis.text.x = element_text(angle = -60, hjust = 0)\n    ) +\n    # add another heatmap\n    heat3 &\n    theme(\n        plot.background = element_blank(),\n        panel.background = element_blank(),\n        legend.background = element_blank()\n    )\n#&gt; → heatmap built with `geom_tile()`\n#&gt; → heatmap built with `geom_tile()`\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\n\n\n\nmat &lt;- read_example(\"measles.rds\")\nggheatmap(mat, filling = FALSE) +\n    geom_tile(aes(fill = value), color = \"white\") +\n    scale_fill_gradientn(\n        colours = c(\"white\", \"cornflowerblue\", \"yellow\", \"red\"),\n        values = scales::rescale(c(0, 800, 1000, 127000), c(0, 1))\n    ) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right() +\n    align_dendro(plot_dendrogram = FALSE) +\n    anno_top(size = unit(2, \"cm\")) +\n    ggalign(data = rowSums) +\n    geom_bar(aes(y = value), fill = \"#FFE200\", stat = \"identity\") +\n    scale_y_continuous(expand = expansion()) +\n    ggtitle(\"Measles cases in US states 1930-2001\\nVaccine introduced 1961\") +\n    theme(plot.title = element_text(hjust = 0.5)) +\n    anno_right(size = unit(2, \"cm\")) +\n    ggalign(data = rowSums) +\n    geom_bar(aes(x = value),\n        fill = \"#FFE200\", stat = \"identity\",\n        orientation = \"y\"\n    ) +\n    scale_x_continuous(expand = expansion()) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0))"
  },
  {
    "objectID": "complexheatmap/more-examples.html#add-more-information-for-gene-expression-matrix",
    "href": "complexheatmap/more-examples.html#add-more-information-for-gene-expression-matrix",
    "title": "More examples",
    "section": "",
    "text": "expr &lt;- read_example(\"gene_expression.rds\")\nmat &lt;- as.matrix(expr[, grep(\"cell\", colnames(expr))])\nbase_mean &lt;- rowMeans(mat)\nmat_scaled &lt;- t(apply(mat, 1, scale))\ntype &lt;- gsub(\"s\\\\d+_\", \"\", colnames(mat))\n\nheat1 &lt;- ggheatmap(mat_scaled) -\n    scheme_align(free_spaces = \"l\") +\n    scale_y_continuous(breaks = NULL) +\n    scale_fill_viridis_c(option = \"magma\") +\n    # add dendrogram for this heatmap\n    anno_top() +\n    align_dendro() +\n    # add a block for the heatmap column\n    ggalign(data = type, size = unit(1, \"cm\")) +\n    geom_tile(aes(y = 1, fill = factor(value))) +\n    scale_y_continuous(breaks = NULL, name = NULL) +\n    scale_fill_brewer(\n        palette = \"Set1\", name = \"type\",\n        guide = guide_legend(position = \"top\")\n    )\n\nheat2 &lt;- ggheatmap(base_mean, width = unit(2, \"cm\")) +\n    scale_y_continuous(breaks = NULL) +\n    scale_x_continuous(name = \"base mean\", breaks = FALSE) +\n    scale_fill_gradientn(colours = c(\"#2600D1FF\", \"white\", \"#EE3F3FFF\")) +\n    # set the active context of the heatmap to the top\n    # and set the size of the top stack\n    anno_top(size = unit(4, \"cm\")) +\n    # add box plot in the heatmap top\n    ggalign() +\n    geom_boxplot(aes(y = value, fill = factor(.extra_panel))) +\n    scale_x_continuous(expand = expansion(), breaks = NULL) +\n    scale_fill_brewer(\n        palette = \"Dark2\", name = \"base mean\",\n        guide = guide_legend(position = \"top\")\n    ) +\n    theme(axis.title.y = element_blank())\n\nheat3 &lt;- ggheatmap(expr$type, width = unit(2, \"cm\")) +\n    scale_fill_brewer(palette = \"Set3\", name = \"gene type\") +\n    scale_x_continuous(breaks = NULL, name = \"gene type\") +\n    # add barplot in the top annotation, and remove the spaces in the y-axis\n    anno_top() -\n    scheme_align(free_spaces = \"lr\") +\n    ggalign() +\n    geom_bar(\n        aes(.extra_panel, fill = factor(value)),\n        position = position_fill()\n    ) +\n    scale_y_continuous(expand = expansion()) +\n    scale_fill_brewer(palette = \"Set3\", name = \"gene type\", guide = \"none\") -\n    scheme_theme(plot.margin = margin())\n\nstack_alignh(mat_scaled) +\n    stack_active(sizes = c(0.2, 1, 1)) +\n    # group stack rows into 5 groups\n    align_kmeans(centers = 5L) +\n    # add a block plot for each group in the stack\n    ggalign(size = unit(1, \"cm\"), data = NULL) +\n    geom_tile(aes(x = 1, fill = factor(.panel))) +\n    scale_fill_brewer(palette = \"Dark2\", name = \"Kmeans group\") +\n    scale_x_continuous(breaks = NULL, name = NULL) +\n    # add a heatmap plot in the stack\n    heat1 +\n    # add another heatmap in the stack\n    heat2 +\n    # we move into the stack layout\n    stack_active() +\n    # add a point plot\n    ggalign(data = expr$length, size = unit(2, \"cm\")) +\n    geom_point(aes(x = value)) +\n    labs(x = \"length\") +\n    theme(\n        panel.border = element_rect(fill = NA),\n        axis.text.x = element_text(angle = -60, hjust = 0)\n    ) +\n    # add another heatmap\n    heat3 &\n    theme(\n        plot.background = element_blank(),\n        panel.background = element_blank(),\n        legend.background = element_blank()\n    )\n#&gt; → heatmap built with `geom_tile()`\n#&gt; → heatmap built with `geom_tile()`\n#&gt; → heatmap built with `geom_tile()`"
  },
  {
    "objectID": "complexheatmap/more-examples.html#the-measles-vaccine-heatmap",
    "href": "complexheatmap/more-examples.html#the-measles-vaccine-heatmap",
    "title": "More examples",
    "section": "",
    "text": "mat &lt;- read_example(\"measles.rds\")\nggheatmap(mat, filling = FALSE) +\n    geom_tile(aes(fill = value), color = \"white\") +\n    scale_fill_gradientn(\n        colours = c(\"white\", \"cornflowerblue\", \"yellow\", \"red\"),\n        values = scales::rescale(c(0, 800, 1000, 127000), c(0, 1))\n    ) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right() +\n    align_dendro(plot_dendrogram = FALSE) +\n    anno_top(size = unit(2, \"cm\")) +\n    ggalign(data = rowSums) +\n    geom_bar(aes(y = value), fill = \"#FFE200\", stat = \"identity\") +\n    scale_y_continuous(expand = expansion()) +\n    ggtitle(\"Measles cases in US states 1930-2001\\nVaccine introduced 1961\") +\n    theme(plot.title = element_text(hjust = 0.5)) +\n    anno_right(size = unit(2, \"cm\")) +\n    ggalign(data = rowSums) +\n    geom_bar(aes(x = value),\n        fill = \"#FFE200\", stat = \"identity\",\n        orientation = \"y\"\n    ) +\n    scale_x_continuous(expand = expansion()) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0))"
  }
]