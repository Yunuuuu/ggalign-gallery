[
  {
    "objectID": "real-world-data.html",
    "href": "real-world-data.html",
    "title": "gallery",
    "section": "",
    "text": "Disturbance of Immune-Related Pathways between Normal and Tumor Tissues in Pan-cancer\n\n\n\ncircle_layout()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nGenomic density and Rainfall plot\n\n\n\ncircle_genomic()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nHeatmap of gene expression matrix\n\n\n\nggheatmap()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nMeasles Vaccine Heatmap\n\n\n\nggheatmap()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nOncoplot of TCGA LAML Mutation Data\n\n\n\nggoncoplot()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "basics/plot-composer-inset.html",
    "href": "basics/plot-composer-inset.html",
    "title": "Plot Composer - Inset",
    "section": "",
    "text": "Plot Composer - Inset\nSometimes it’s useful to inset a plot into another.\n\nlibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\nlibrary(grid)\np1 &lt;- ggplot(mtcars) +\n    geom_point(aes(mpg, disp))\np2 &lt;- ggplot(mtcars) +\n    geom_boxplot(aes(gear, disp, group = gear))\n# Use viewport() to define the plot area\np1 + inset(p2, vp = viewport(0.6, 0.6,\n    just = c(0, 0), width = 0.4, height = 0.4\n))"
  },
  {
    "objectID": "basics/heatmap.html",
    "href": "basics/heatmap.html",
    "title": "Heatmap",
    "section": "",
    "text": "Heatmap\n\nlibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\nset.seed(123)\n# Prepare heatmap matrix\nmat &lt;- matrix(\n    rnorm(100, mean = 0, sd = 2),\n    nrow = 10, ncol = 10,\n    dimnames = list(paste0(\"G\", 1:10), paste0(\"S\", 1:10))\n)\n\n\nggheatmap(mat)\n#&gt; → heatmap built with `geom_tile()`"
  },
  {
    "objectID": "basics/plot-composer.html",
    "href": "basics/plot-composer.html",
    "title": "Plot Composer",
    "section": "",
    "text": "Plot Composer\n\nlibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\nlibrary(ggplot2)\np1 &lt;- ggplot(mtcars) + \n  geom_point(aes(mpg, disp)) + \n  ggtitle('Plot 1')\n\np2 &lt;- ggplot(mtcars) + \n  geom_boxplot(aes(gear, disp, group = gear)) + \n  ggtitle('Plot 2')\n\np3 &lt;- ggplot(mtcars) + \n  geom_point(aes(hp, wt, colour = mpg)) + \n  ggtitle('Plot 3')\n\np4 &lt;- ggplot(mtcars) + \n  geom_bar(aes(gear)) + \n  facet_wrap(~cyl) + \n  ggtitle('Plot 4')\n\nCombine plots directly:\n\nalign_plots(p1, p2)\n\n\n\n\n\n\n\nBy row:\n\nalign_plots(p1, p2, ncol = 1)\n\n\n\n\n\n\n\nAlign a list of plots:\n\nalign_plots(!!!list(p1, p2, p3))\n\n\n\n\n\n\n\nSet different width for plots:\n\nalign_plots(p1, p2, widths = c(2, 1))\n\n\n\n\n\n\n\nWorks for multiple plots:\n\nalign_plots(p1, p2, p3, p4, ncol = 2, widths = c(2, 1))\n\n\n\n\n\n\n\nSet space:\n\nalign_plots(p1, NULL, p2)\n\n\n\n\n\n\n\nMore see Data-Free Composition of ggalign tutorial book."
  },
  {
    "objectID": "basics/heatmap-with-ordering-weights.html",
    "href": "basics/heatmap-with-ordering-weights.html",
    "title": "Heatmap with Ordering Weights",
    "section": "",
    "text": "Heatmap with Ordering Weights\n\nlibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\nset.seed(123)\n# Prepare heatmap matrix\nmat &lt;- matrix(\n    rnorm(100, mean = 0, sd = 2),\n    nrow = 10, ncol = 10,\n    dimnames = list(paste0(\"G\", 1:10), paste0(\"S\", 1:10))\n)\n\n\nggheatmap(mat) +\n    anno_left() +\n    align_order(rowMeans)\n#&gt; → heatmap built with `geom_tile()`"
  },
  {
    "objectID": "basics/heatmap-with-kmeans.html",
    "href": "basics/heatmap-with-kmeans.html",
    "title": "Heatmap with Kmeans",
    "section": "",
    "text": "Heatmap with Kmeans\n\nlibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\nset.seed(123)\n# Prepare heatmap matrix\nmat &lt;- matrix(\n    rnorm(100, mean = 0, sd = 2),\n    nrow = 10, ncol = 10,\n    dimnames = list(paste0(\"G\", 1:10), paste0(\"S\", 1:10))\n)\n\n\nggheatmap(mat) +\n    anno_top() +\n    align_kmeans(3)\n#&gt; → heatmap built with `geom_tile()`"
  },
  {
    "objectID": "basics/heatmap-with-different-shape.html",
    "href": "basics/heatmap-with-different-shape.html",
    "title": "Heatmap Pie",
    "section": "",
    "text": "Heatmap Pie\n\nlibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\nset.seed(123)\nggheatmap(matrix(runif(360L), nrow = 20L), filling = NULL) +\n    geom_pie(aes(angle = value * 360, fill = value))\n\n\n\n\n\n\n\nFor more complex customizations of pie charts, you can try using ggforce::geom_arc_bar() instead."
  },
  {
    "objectID": "basics.html",
    "href": "basics.html",
    "title": "gallery",
    "section": "",
    "text": "Heatmap\n\n\n\nggheatmap()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nHeatmap Pie\n\n\n\nggheatmap()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nHeatmap with Annotations\n\n\n\nggheatmap()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nHeatmap with Dendrogram\n\n\n\nggheatmap()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nHeatmap with Group Variables\n\n\n\nggheatmap()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nHeatmap with Kmeans\n\n\n\nggheatmap()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nHeatmap with Ordering Weights\n\n\n\nggheatmap()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nMarginal Plot\n\n\n\nggside()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nPlot Composer\n\n\n\nalign_plots()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nPlot Composer - Combine Any R Plots\n\n\n\nalign_plots()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nPlot Composer - Inset\n\n\n\nalign_plots()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "real-world-data/tcga-laml-oncoplot.html",
    "href": "real-world-data/tcga-laml-oncoplot.html",
    "title": "Oncoplot of TCGA LAML Mutation Data",
    "section": "",
    "text": "Oncoplot of TCGA LAML Mutation Data\nWe utilize the TCGA LAML mutation dataset included in the R maftools package.\nTo reduce complexity, we randomly sample 20 tumor samples. The data preparation code is initially collapsed in the source but can be expanded for inspection.\n\nCode# load data from `maftools`\nlaml.maf &lt;- system.file(\"extdata\", \"tcga_laml.maf.gz\", package = \"maftools\")\n# clinical information containing survival information and histology. This is optional\nlaml.clin &lt;- system.file(\"extdata\", \"tcga_laml_annot.tsv\", package = \"maftools\")\nlaml &lt;- maftools::read.maf(\n    maf = laml.maf,\n    clinicalData = laml.clin,\n    verbose = FALSE\n)\nset.seed(25) # 2, 11, 20, 25, 29, 32\nnew_laml &lt;- maftools::subsetMaf(laml,\n    tsb = sample(maftools::getClinicalData(laml)$Tumor_Sample_Barcode, 20)\n)\n#&gt; -Processing clinical data\n\n\n\nCodelibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\n\nggoncoplot(\n    new_laml,\n    n_top = 10, collapse_vars = FALSE, filling = FALSE,\n    remove_empty_samples = FALSE\n) +\n    geom_subtile(aes(fill = value),\n        ncol = 1L, height = 0.8,\n        show.legend = TRUE\n    ) +\n    theme_no_axes(\"x\") +\n\n    # add top annotation -------------------------------\n    anno_top(size = 0.2) +\n    ggalign(\n        data = function(data) {\n            vars &lt;- ggalign_lvls(data)\n            data &lt;- ggalign_attr(data, \"sample_summary\")\n            as.matrix(data[intersect(names(data), vars)])\n        }\n    ) +\n    scheme_data(function(data) {\n        data$.column_names &lt;- factor(data$.column_names, ggalign_lvls(data))\n        data\n    }) +\n    geom_bar(aes(.x, value, fill = .column_names),\n        stat = \"identity\"\n    ) +\n    guides(fill = \"none\") +\n    ylab(\"TMB\") +\n    scale_y_continuous(breaks = scales::breaks_pretty(2L)) +\n\n    # add right annotation -----------------------------\n    anno_right(size = 0.4) -\n    # remove bottom spaces of the right annotation when aligning\n    scheme_align(free_spaces = \"b\") +\n\n    # add the text percent for the alterated samples in the right annotation\n    ggalign(\n        data = function(data) {\n            # Atomic vector will be converted into a data frame.\n            ggalign_attr(data, \"gene_summary\")$AlteredSamples /\n                ggalign_attr(data, \"n_samples\")\n        }\n    ) +\n    geom_text(aes(1, label = scales::label_percent()(value)),\n        hjust = 1.2, size = 5, family = \"Helvetica\"\n    ) +\n    scale_x_continuous(\n        expand = expansion(),\n        name = NULL, breaks = NULL,\n        limits = c(0, 1)\n    ) +\n    theme(plot.margin = margin()) +\n\n    # add the bar plot in the right annotation\n    ggalign(data = function(data) {\n        vars &lt;- ggalign_lvls(data)\n        data &lt;- ggalign_attr(data, \"variant_weights\")\n        as.matrix(data[intersect(names(data), vars)])\n    }) +\n    scheme_data(function(data) {\n        data$.column_names &lt;- factor(data$.column_names, ggalign_lvls(data))\n        data\n    }) +\n    geom_bar(aes(value, fill = .column_names),\n        stat = \"identity\",\n        orientation = \"y\"\n    ) +\n    guides(fill = \"none\") +\n    # labs(fill = \"right\") +\n    xlab(\"Variant weights\") +\n    scale_x_continuous(breaks = scales::breaks_pretty(1)) -\n    # we apply the scale mapping to\n    # - the top and right annotation: `position = \"tr\"`\n    # - the main plot: `main = TRUE`\n    with_quad(\n        scale_fill_brewer(\n            \"Mutations\",\n            palette = \"Dark2\",\n            na.translate = FALSE, drop = FALSE\n        ),\n        position = \"tr\",\n        main = TRUE\n    ) +\n\n    # add bottom annotation ----------------------------\n    anno_bottom(size = 0.2) +\n    # add bar plot in the bottom annotation\n    ggalign(data = function(data) {\n        data &lt;- ggalign_attr(data, \"titv\")$fraction.contribution\n        as.matrix(data[-1L])\n    }) +\n    geom_bar(aes(y = value, fill = .column_names), stat = \"identity\") +\n    ylab(\"Ti/Tv\") +\n    scale_y_continuous(breaks = scales::breaks_pretty(3L)) +\n    scale_fill_brewer(\"Ti/Tv\", palette = \"Set2\", na.translate = FALSE)\n#&gt; `geom_subtile()` subdivide tile into a maximal of 3 rectangles"
  },
  {
    "objectID": "real-world-data/pan-cancer-immune-pathways.html",
    "href": "real-world-data/pan-cancer-immune-pathways.html",
    "title": "Disturbance of Immune-Related Pathways between Normal and Tumor Tissues in Pan-cancer",
    "section": "",
    "text": "Disturbance of Immune-Related Pathways between Normal and Tumor Tissues in Pan-cancer\nData was downloaded from https://pmc.ncbi.nlm.nih.gov/articles/PMC9856581/#app1-cancers-15-00342\nWe randomly selected 5 pathways for simplicity. The data preparation code is collapsed in the source but can be expanded for inspection.\n\nCode# Read data from the supplementary Excel file\ndata &lt;- readxl::read_xlsx(\"rawdata/pan-cancer-immune-pathways.xlsx\", skip = 1L)\n#&gt; New names:\n#&gt; • `` -&gt; `...3`\n#&gt; • `` -&gt; `...5`\n#&gt; • `` -&gt; `...7`\n#&gt; • `` -&gt; `...9`\n#&gt; • `` -&gt; `...11`\n#&gt; • `` -&gt; `...13`\n#&gt; • `` -&gt; `...15`\n#&gt; • `` -&gt; `...17`\n#&gt; • `` -&gt; `...19`\n#&gt; • `` -&gt; `...21`\n#&gt; • `` -&gt; `...23`\n#&gt; • `` -&gt; `...25`\n#&gt; • `` -&gt; `...27`\n#&gt; • `` -&gt; `...29`\n#&gt; • `` -&gt; `...31`\n#&gt; • `` -&gt; `...33`\n#&gt; • `` -&gt; `...35`\n#&gt; • `` -&gt; `...37`\n#&gt; • `` -&gt; `...39`\n#&gt; • `` -&gt; `...41`\n#&gt; • `` -&gt; `...43`\n#&gt; • `` -&gt; `...45`\n#&gt; • `` -&gt; `...47`\n#&gt; • `` -&gt; `...49`\n#&gt; • `` -&gt; `...51`\nset.seed(3L)\n\n# Randomly select 5 pathways (rows 2–18 cover the main data)\nselected &lt;- sample(2:18, 5)\n\n# Extract logFC and adjusted p-values for the selected pathways\nlogFC &lt;- data[selected, c(1, which(as.character(data[1, ]) == \"logFC\"))]\nadj.P &lt;- data[selected, c(1, which(as.character(data[1, ]) == \"adj.P\"))]\nnames(adj.P) &lt;- names(logFC)\n\n# Convert to numeric matrix: pathways as columns, tumor as rows\nlogFC &lt;- dplyr::mutate(logFC, dplyr::across(!pathway, as.numeric)) |&gt;\n    tibble::column_to_rownames(var = \"pathway\") |&gt;\n    as.matrix() |&gt;\n    t()\nadj.P &lt;- dplyr::mutate(adj.P, dplyr::across(!pathway, as.numeric)) |&gt;\n    tibble::column_to_rownames(var = \"pathway\") |&gt;\n    as.matrix() |&gt;\n    t()\n\n\n\nCodelibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\n\ncircle_discrete(logFC,\n    radial = coord_radial(start = pi / 2, end = pi * 2, expand = FALSE),\n    sector_spacing = 5 * pi / 180\n) +\n    # Align dendrogram above the radial sectors, cluster conditions into 5 groups\n    align_dendro(aes(color = branch), k = 5L, size = 1) +\n    theme_no_axes(\"y\") +\n    scale_color_brewer(palette = \"Dark2\") +\n\n    # add heatmap plot\n    ggalign(mapping = aes(y = .column_names, fill = value)) +\n    geom_tile(width = 1, height = 1) +\n    geom_text(aes(label = \"*\"), data = function(dd) {\n        dd$pvalue &lt;- adj.P[cbind(dd$.row_index, dd$.column_index)]\n        dplyr::filter(dd, pvalue &lt; 0.05)\n    }) +\n    scale_fill_gradient2(\n        low = \"blue\", high = \"red\",\n        name = \"logFC\",\n        limits = c(-1, 1),\n        breaks = c(-0.5, 0, 0.5)\n    ) +\n    guides(r = \"none\", r.sec = \"axis\", theta = guide_axis_theta(angle = 0))"
  },
  {
    "objectID": "real-world-data/measles-vaccine-heatmap.html",
    "href": "real-world-data/measles-vaccine-heatmap.html",
    "title": "Measles Vaccine Heatmap",
    "section": "",
    "text": "Measles Vaccine Heatmap\nWe utilize the measles vaccine dataset included in the R ComplexHeatmap package to reproduce the figure from https://jokergoo.github.io/ComplexHeatmap-reference/book/more-examples.html.\n\nCodelibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\n\nmat &lt;- mat &lt;- readRDS(\n    system.file(\"extdata\", \"measles.rds\", package = \"ComplexHeatmap\")\n)\nggheatmap(mat, filling = FALSE) +\n    geom_tile(aes(fill = value), color = \"white\") +\n    scale_fill_gradientn(\n        colours = c(\"white\", \"cornflowerblue\", \"yellow\", \"red\"),\n        values = scales::rescale(c(0, 800, 1000, 127000), c(0, 1))\n    ) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_top(size = unit(2, \"cm\")) +\n    ggalign(data = rowSums) +\n    geom_bar(aes(y = value), fill = \"#FFE200\", stat = \"identity\") +\n    scale_y_continuous(expand = expansion()) +\n    ggtitle(\"Measles cases in US states 1930-2001\\nVaccine introduced 1961\") +\n    theme(plot.title = element_text(hjust = 0.5)) +\n    anno_right(size = unit(2, \"cm\")) +\n    ggalign(data = rowSums) +\n    geom_bar(aes(x = value),\n        fill = \"#FFE200\", stat = \"identity\",\n        orientation = \"y\"\n    ) +\n    scale_x_continuous(expand = expansion(), name = NULL) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0))"
  },
  {
    "objectID": "real-world-data/genomic-density-and-rainfall-plot.html",
    "href": "real-world-data/genomic-density-and-rainfall-plot.html",
    "title": "Genomic density and Rainfall plot",
    "section": "",
    "text": "Genomic density and Rainfall plot\nRainfall plots are a powerful tool to visualize the distribution and clustering of genomic regions across the genome. Each point in a rainfall plot represents a genomic region, with:\n\nThe x-axis showing its genomic coordinate.\nThe y-axis showing the log-transformed minimal distance to its two neighboring regions (log10(dist)).\n\nClusters of nearby regions appear as dense “rainfalls” of points, making this approach ideal for identifying mutation hotspots, differentially methylated regions (DMRs), or other non-random patterns of localization.\nHowever, when region density is high, overplotting can obscure meaningful interpretation. To address this, we overlay a genomic density track that summarizes the fraction of a genomic window covered by regions—providing a smoother representation of local enrichment.\n\nCodelibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\nThe data comes from the circlize package and includes both hyper- and hypo-methylated DMRs in the human genome.\n\nCodeload(system.file(package = \"circlize\", \"extdata\", \"DMR.RData\", mustWork = TRUE))\nbed_data &lt;- dplyr::bind_rows(hyper = DMR_hyper, hypo = DMR_hypo, .id = \"DMR\") |&gt;\n    dplyr::relocate(DMR, .after = dplyr::last_col())\n\n\nif the amount of regions in a cluster is high, dots will overlap, and direct assessment of the number and density of regions in the cluster will be impossible. To overcome this limitation, additional tracks are added which visualize the genomic density of regions (defined as the fraction of a genomic window that is covered by genomic regions).\n\ncircle_genomic(\n    \"hg19\",\n    radial = coord_radial(inner.radius = 0.2, rotate.angle = TRUE),\n    direction = \"inward\",\n    theme = theme(\n        plot.margin = margin(t = 10, b = 10, l = 2, unit = \"mm\")\n    )\n) -\n    # Remove radial axes for a cleaner circular look\n    scheme_theme(\n        axis.text.r = element_blank(),\n        axis.ticks.r = element_blank()\n    ) +\n\n    # Cytoband (Ideogram) Layer\n    ggalign(size = 0.1) +\n    geom_rect(\n        aes(\n            xmin = start, xmax = end, ymin = 0, ymax = 1,\n            fill = gieStain\n        )\n    ) +\n    scale_fill_manual(\n        values = c(\n            gpos100 = rgb(0, 0, 0, maxColorValue = 255),\n            gpos = rgb(0, 0, 0, maxColorValue = 255),\n            gpos75 = rgb(130, 130, 130, maxColorValue = 255),\n            gpos66 = rgb(160, 160, 160, maxColorValue = 255),\n            gpos50 = rgb(200, 200, 200, maxColorValue = 255),\n            gpos33 = rgb(210, 210, 210, maxColorValue = 255),\n            gpos25 = rgb(200, 200, 200, maxColorValue = 255),\n            gvar = rgb(220, 220, 220, maxColorValue = 255),\n            gneg = rgb(255, 255, 255, maxColorValue = 255),\n            acen = rgb(217, 47, 39, maxColorValue = 255),\n            stalk = rgb(100, 127, 164, maxColorValue = 255)\n        ),\n        guide = \"none\"\n    ) +\n    scale_x_continuous(\n        breaks = scales::breaks_pretty(2),\n        labels = scales::label_bytes()\n    ) +\n    guides(\n        r = \"none\", r.sec = \"axis\",\n        theta = guide_axis_theta(angle = 0)\n    ) +\n    theme(axis.text.theta = element_text(size = 6)) +\n    scale_y_continuous(limits = c(0, 1), oob = scales::oob_keep) +\n    # Add chromosome labels\n    geom_text(aes(middle, label = seqnames, y = 2.2),\n        vjust = 0,\n        data = function(d) {\n            data &lt;- ggalign_attr(d, \"ranges\")\n            data$middle &lt;- (data$start + data$end) / 2\n            data\n        }\n    ) +\n\n    # add rainfall plot\n    ggalign(bed_data) +\n    geom_point(\n        aes(middle, log10(dist), color = DMR),\n        data = function(d) {\n            d &lt;- dplyr::bind_rows(!!!lapply(\n                split(d, ~DMR), function(dd) genomic_dist(dd)\n            ))\n            d$middle &lt;- (d$start + d$end) / 2\n            dplyr::rename(d, seqnames = chr)\n        }\n    ) +\n    scale_color_brewer(\n        palette = \"Dark2\",\n        guide = guide_legend(\n            position = \"inside\",\n            theme = theme(legend.position.inside = c(0.5, 0.5))\n        )\n    ) +\n\n    # add density plot\n    ggalign(DMR_hyper, size = 0.5) +\n    geom_density(\n        aes(middle, density, color = after_scale(fill)),\n        fill = RColorBrewer::brewer.pal(3, \"Dark2\")[1L],\n        stat = \"identity\",\n        data = function(d) {\n            d &lt;- genomic_density(d)\n            d$middle &lt;- (d$start + d$end) / 2\n            d\n        }\n    ) +\n    ggalign(DMR_hypo, size = 0.5) +\n    geom_density(\n        aes(middle, density, color = after_scale(fill)),\n        fill = RColorBrewer::brewer.pal(3, \"Dark2\")[2L],\n        stat = \"identity\",\n        data = function(d) {\n            d &lt;- genomic_density(d)\n            d$middle &lt;- (d$start + d$end) / 2\n            d\n        }\n    ) &\n    facet_sector(vars(seqnames))"
  },
  {
    "objectID": "real-world-data/complexheatmap-gene-expression.html",
    "href": "real-world-data/complexheatmap-gene-expression.html",
    "title": "Heatmap of gene expression matrix",
    "section": "",
    "text": "Heatmap of gene expression matrix\nWe utilize the gene expression dataset included in the R ComplexHeatmap package to reproduce the multi-panel gene expression heatmap from https://jokergoo.github.io/ComplexHeatmap-reference/book/more-examples.html.\n\nCodelibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\nWe load the example dataset and process it for visualization, the data preparation code is collapsed in the source but can be expanded for inspection.\n\nCodeexpr &lt;- readRDS(system.file(\n    \"extdata\", \"gene_expression.rds\",\n    package = \"ComplexHeatmap\"\n))\nmat &lt;- as.matrix(expr[, grep(\"cell\", colnames(expr))])\nbase_mean &lt;- rowMeans(mat)\nmat_scaled &lt;- t(apply(mat, 1, scale))\ntype &lt;- gsub(\"s\\\\d+_\", \"\", colnames(mat))\n\n\n\nheat1 &lt;- ggheatmap(mat_scaled) -\n    scheme_align(free_spaces = \"l\") +\n    scale_y_continuous(breaks = NULL) +\n    scale_fill_viridis_c(option = \"magma\") +\n    # add dendrogram for this heatmap\n    anno_top() +\n    align_dendro() +\n    # add a block for the heatmap column\n    ggalign(data = type, size = unit(1, \"cm\")) +\n    geom_tile(aes(y = 1, fill = factor(value))) +\n    scale_y_continuous(breaks = NULL, name = NULL) +\n    scale_fill_brewer(\n        palette = \"Set1\", name = \"type\",\n        guide = guide_legend(position = \"top\")\n    )\n\nheat2 &lt;- ggheatmap(base_mean, width = unit(2, \"cm\")) +\n    scale_y_continuous(breaks = NULL) +\n    scale_x_continuous(name = \"base mean\", breaks = FALSE) +\n    scale_fill_gradientn(colours = c(\"#2600D1FF\", \"white\", \"#EE3F3FFF\")) +\n    # set the active context of the heatmap to the top\n    # and set the size of the top stack\n    anno_top(size = unit(4, \"cm\")) +\n    # add box plot in the heatmap top\n    ggalign() +\n    geom_boxplot(aes(y = value, fill = factor(.extra_panel))) +\n    scale_x_continuous(expand = expansion(), breaks = NULL) +\n    scale_fill_brewer(\n        palette = \"Dark2\", name = \"base mean\",\n        guide = guide_legend(position = \"top\")\n    ) +\n    theme(axis.title.y = element_blank())\n\nheat3 &lt;- ggheatmap(expr$type, width = unit(2, \"cm\")) +\n    scale_fill_brewer(palette = \"Set3\", name = \"gene type\") +\n    scale_x_continuous(breaks = NULL, name = \"gene type\") +\n    # add barplot in the top annotation, and remove the spaces in the y-axis\n    anno_top() -\n    scheme_align(free_spaces = \"lr\") +\n    ggalign() +\n    geom_bar(\n        aes(.extra_panel, fill = factor(value)),\n        position = position_fill()\n    ) +\n    scale_y_continuous(expand = expansion()) +\n    scale_fill_brewer(palette = \"Set3\", name = \"gene type\", guide = \"none\") -\n    scheme_theme(plot.margin = margin())\n\nstack_alignh(mat_scaled) +\n    stack_active(sizes = c(0.2, 1, 1)) +\n    # group stack rows into 5 groups\n    align_kmeans(centers = 5L) +\n    # add a block plot for each group in the stack\n    ggalign(size = unit(1, \"cm\"), data = NULL) +\n    geom_tile(aes(x = 1, fill = factor(.panel))) +\n    scale_fill_brewer(palette = \"Dark2\", name = \"Kmeans group\") +\n    scale_x_continuous(breaks = NULL, name = NULL) +\n    # add a heatmap plot in the stack\n    heat1 +\n    # add another heatmap in the stack\n    heat2 +\n    # we move into the stack layout\n    stack_active() +\n    # add a point plot\n    ggalign(data = expr$length, size = unit(2, \"cm\")) +\n    geom_point(aes(x = value)) +\n    labs(x = \"length\") +\n    theme(\n        panel.border = element_rect(fill = NA),\n        axis.text.x = element_text(angle = -60, hjust = 0)\n    ) +\n    # add another heatmap\n    heat3 &\n    theme(\n        plot.background = element_blank(),\n        panel.background = element_blank(),\n        legend.background = element_blank()\n    )\n#&gt; → heatmap built with `geom_tile()`\n#&gt; → heatmap built with `geom_tile()`\n#&gt; → heatmap built with `geom_tile()`"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Basics",
    "section": "",
    "text": "2025-08-01\n\n\n\n\nBasics\n\n\n\n\n\n\n\n\nHeatmap\n\n\n\nggheatmap()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nHeatmap Pie\n\n\n\nggheatmap()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nHeatmap with Annotations\n\n\n\nggheatmap()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nHeatmap with Dendrogram\n\n\n\nggheatmap()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nHeatmap with Group Variables\n\n\n\nggheatmap()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nHeatmap with Kmeans\n\n\n\nggheatmap()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nHeatmap with Ordering Weights\n\n\n\nggheatmap()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nMarginal Plot\n\n\n\nggside()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nPlot Composer\n\n\n\nalign_plots()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nPlot Composer - Combine Any R Plots\n\n\n\nalign_plots()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nPlot Composer - Inset\n\n\n\nalign_plots()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\nNo matching items\n\n\n\nAdvanced\n\n\n\n\nNo matching items\n\n\n\nReal World Data\n\n\n\n\n\n\n\n\nDisturbance of Immune-Related Pathways between Normal and Tumor Tissues in Pan-cancer\n\n\n\ncircle_layout()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nGenomic density and Rainfall plot\n\n\n\ncircle_genomic()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nHeatmap of gene expression matrix\n\n\n\nggheatmap()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nMeasles Vaccine Heatmap\n\n\n\nggheatmap()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\n\n\n\n\n\nOncoplot of TCGA LAML Mutation Data\n\n\n\nggoncoplot()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\nNo matching items\n\n\n\nComplexHeatmap\nReproducing heatmaps from the ComplexHeatmap book using ggalign.\n\n\n\n\n\n\n\n\nA Single Heatmap\n\n\n\nggheatmap()\n\n\n\n\nAug 1, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "basics/plot-composer-wrap.html",
    "href": "basics/plot-composer-wrap.html",
    "title": "Plot Composer - Combine Any R Plots",
    "section": "",
    "text": "Plot Composer - Combine Any R Plots\nThe ggalign package includes the ggwrap() function, which enables the conversion of non-ggplot2 elements into a general object that is compatible with align_plots(). This provides a versatile tool for incorporating any type of graphics within R.\n\nlibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\np1 &lt;- ggplot(mtcars) +\n    geom_point(aes(mpg, disp)) +\n    ggtitle(\"Plot 1\")\n\nAdd base plot:\n\nalign_plots(\n    p1,\n    ggwrap(\n        ~ plot(mtcars$mpg, mtcars$disp)\n    )\n)\n\n\n\n\n\n\n\n\nbase plot should be provided using formula.\n\n\nalign_plots(\n    p1,\n    ggwrap(\n        ~ plot(mtcars$mpg, mtcars$disp), \n        align = \"full\"\n    )\n)\n\n\n\n\n\n\n\n\nalign_plots(\n    p1,\n    ggwrap(\n        ~ plot(mtcars$mpg, mtcars$disp)\n    ) +\n    # add title for new plot\n    ggtitle('Plot 2')\n)\n\n\n\n\n\n\n\nSet plot widths:\n\nalign_plots(\n    p1,\n    ggwrap(\n        ~ plot(mtcars$mpg, mtcars$disp)\n    ),\n    widths = c(1, 2)\n)\n\n\n\n\n\n\n\nSince ggwrap() is automatically called in most cases, you can write code like:\n\nalign_plots(\n    p1,\n    ~ plot(mtcars$mpg, mtcars$disp)\n)\n\n\n\n\n\n\n\nAdd grid grobs, for example:\n\nalign_plots(\n    p1,\n    grid::textGrob('Some really important text')\n)\n\n\n\n\n\n\n\nAdd cluster plot:\n\nhc &lt;- hclust(dist(USArrests), \"ave\")\nalign_plots(\n    p1,\n    ~ plot(hc)\n)\n\n\n\n\n\n\n\nAdd lattice plots, for example:\n\nalign_plots(\n    p1,\n    lattice::xyplot(disp ~ mpg, data = mtcars)\n)\n\n\n\n\n\n\n\nAdd basic pheatmap:\n\nalign_plots(\n    p1,\n    pheatmap::pheatmap(matrix(rnorm(200), 20, 10))\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd ComplexHeatmap:\n\nalign_plots(\n    p1,\n    ComplexHeatmap::pheatmap(matrix(rnorm(200), 20, 10))\n)\n\n\n\n\n\n\n\nTree plots can be generated by ggtree.\n\nlibrary(treeio)\n#&gt; treeio v1.32.0 Learn more at https://yulab-smu.top/contribution-tree-data/\n#&gt; \n#&gt; Please cite:\n#&gt; \n#&gt; LG Wang, TTY Lam, S Xu, Z Dai, L Zhou, T Feng, P Guo, CW Dunn, BR\n#&gt; Jones, T Bradley, H Zhu, Y Guan, Y Jiang, G Yu. treeio: an R package\n#&gt; for phylogenetic tree input and output with richly annotated and\n#&gt; associated data. Molecular Biology and Evolution. 2020, 37(2):599-603.\n#&gt; doi: 10.1093/molbev/msz240\nlibrary(ggtree)\n#&gt; ggtree v3.16.3 Learn more at https://yulab-smu.top/contribution-tree-data/\n#&gt; \n#&gt; Please cite:\n#&gt; \n#&gt; Shuangbin Xu, Lin Li, Xiao Luo, Meijun Chen, Wenli Tang, Li Zhan, Zehan\n#&gt; Dai, Tommy T. Lam, Yi Guan, Guangchuang Yu. Ggtree: A serialized data\n#&gt; object for visualization of a phylogenetic tree and annotation data.\n#&gt; iMeta 2022, 1(4):e56. doi:10.1002/imt2.56\n#&gt; \n#&gt; Attaching package: 'ggtree'\n#&gt; The following object is masked from 'package:ggalign':\n#&gt; \n#&gt;     inset\n\nnwk &lt;- system.file(\"extdata\", \"sample.nwk\", package=\"treeio\")\ntree &lt;- read.tree(nwk)\n\nptree &lt;- ggplot(tree, aes(x, y)) + geom_tree() + theme_tree()\n#&gt; Warning: `aes_()` was deprecated in ggplot2 3.0.0.\n#&gt; ℹ Please use tidy evaluation idioms with `aes()`\n#&gt; ℹ The deprecated feature was likely used in the ggtree package.\n#&gt;   Please report the issue at &lt;https://github.com/YuLab-SMU/ggtree/issues&gt;.\n\nAs ptree is also a ggplot object, it can be naturally combined with p1.\n\nalign_plots(\n    ptree,\n    p1\n)"
  },
  {
    "objectID": "basics/heatmap-with-dendrogram.html",
    "href": "basics/heatmap-with-dendrogram.html",
    "title": "Heatmap with Dendrogram",
    "section": "",
    "text": "Heatmap with Dendrogram\n\nlibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\nset.seed(123)\n# Prepare heatmap matrix\nmat &lt;- matrix(\n    rnorm(100, mean = 0, sd = 2),\n    nrow = 10, ncol = 10,\n    dimnames = list(paste0(\"G\", 1:10), paste0(\"S\", 1:10))\n)\n\n\nggheatmap(mat) +\n    anno_top() +\n    align_dendro(aes(color = branch), k = 3) +\n    geom_point(aes(color = branch, y = y)) +\n    scale_color_brewer(palette = \"Dark2\")\n#&gt; → heatmap built with `geom_tile()`"
  },
  {
    "objectID": "basics/heatmap-with-group-variables.html",
    "href": "basics/heatmap-with-group-variables.html",
    "title": "Heatmap with Group Variables",
    "section": "",
    "text": "Heatmap with Group Variables\n\nlibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\nset.seed(123)\n# Prepare heatmap matrix\nmat &lt;- matrix(\n    rnorm(100, mean = 0, sd = 2),\n    nrow = 10, ncol = 10,\n    dimnames = list(paste0(\"G\", 1:10), paste0(\"S\", 1:10))\n)\n\n\nggheatmap(mat) +\n    anno_top() +\n    align_group(sample(letters[1:4], ncol(mat), replace = TRUE))\n#&gt; → heatmap built with `geom_tile()`"
  },
  {
    "objectID": "basics/heatmap-with-annotations.html",
    "href": "basics/heatmap-with-annotations.html",
    "title": "Heatmap with Annotations",
    "section": "",
    "text": "Heatmap with Annotations\n\nlibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\nset.seed(123)\nmat &lt;- matrix(\n    rnorm(100, mean = 0, sd = 2),\n    nrow = 10, ncol = 10,\n    dimnames = list(paste0(\"G\", 1:10), paste0(\"S\", 1:10))\n)\n\nAnnotate top with color bars:\n\nggheatmap(mat) +\n    anno_top(size = unit(1, \"cm\")) +\n    align_kmeans(centers = 3L) +\n    ggalign(data = NULL) +\n    geom_tile(aes(y = 1L, fill = .panel, color = .panel)) +\n    theme_no_axes(\"y\")\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\nAnnotate both left and right positions:\n\nggheatmap(mat) +\n    anno_right(size = 0.3) +\n    align_dendro() +\n    anno_left(size = 0.3) +\n    ggalign(rowSums) +\n    geom_bar(aes(x = value, y = .y, fill = value),\n        orientation = \"y\", stat = \"identity\"\n    ) +\n    scale_fill_viridis_c(option = \"A\")\n#&gt; → heatmap built with `geom_tile()`"
  },
  {
    "objectID": "basics/marginal-plots.html",
    "href": "basics/marginal-plots.html",
    "title": "Marginal Plot",
    "section": "",
    "text": "Marginal Plot\nA marginal plot is a visualization that combines a main plot (usually a scatter plot) with additional plots in the margins of the axes. These marginal plots display the distributions of the individual variables, often using histograms, box plots, or other visual representations.\n\nlibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\nggside(mpg, aes(displ, hwy, colour = class)) -\n    scheme_theme(theme_bw()) +\n    geom_point(size = 2) +\n    # initialize top annotation\n    anno_top(size = 0.3) +\n    # add a plot in the top annotation\n    ggalign() +\n    geom_density(aes(displ, y = after_stat(density), colour = class), position = \"stack\") +\n    # initialize right annotation\n    anno_right(size = 0.3) +\n    # add a plot in the right annotation\n    ggalign() +\n    geom_density(aes(x = after_stat(density), hwy, colour = class),\n        position = \"stack\"\n    )\n\n\n\n\n\n\n\nReproduce cases in Add marginal plots of ggpubr post.\n\nggside(iris, aes(Sepal.Length, Sepal.Width, colour = Species)) +\n    geom_point(size = 3, alpha = 0.6) +\n    ggsci::scale_color_jco() +\n    theme_classic() +\n    anno_top(size = 0.2) +\n    ggalign() +\n    geom_density(aes(x = Sepal.Length)) +\n    theme_no_axes() +\n    anno_right(size = 0.2) +\n    ggalign() +\n    geom_density(aes(y = Sepal.Width)) +\n    theme_no_axes()\n\n\n\n\n\n\n\n\nggside(iris, aes(Sepal.Length, Sepal.Width, colour = Species)) +\n    geom_point(size = 3, alpha = 0.6) +\n    ggsci::scale_color_jco() +\n    theme_classic() +\n    anno_top(size = 0.2) +\n    ggalign() +\n    geom_boxplot(aes(x = Sepal.Length), fill = \"grey\") +\n    theme_no_axes() +\n    anno_right(size = 0.2) +\n    ggalign() +\n    geom_boxplot(aes(y = Sepal.Width), fill = \"grey\") +\n    theme_no_axes()\n\n\n\n\n\n\n\n\nggside(iris, aes(Sepal.Length, Sepal.Width, colour = Species)) +\n    geom_point(size = 3, alpha = 0.6) +\n    ggsci::scale_color_jco() +\n    theme_light() +\n    anno_top(size = 0.2) +\n    ggalign() +\n    geom_density(aes(x = Sepal.Length, fill = Species, alpha = 0.6)) +\n    theme_no_axes() +\n    anno_right(size = 0.2) +\n    ggalign() +\n    geom_density(aes(y = Sepal.Width, fill = Species), alpha = 0.6) +\n    theme_no_axes() &\n    ggsci::scale_fill_jco() &\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\nggside(iris, aes(Sepal.Length, Sepal.Width, colour = Species)) +\n    geom_point(size = 3, alpha = 0.6) +\n    geom_smooth(method = lm) +\n    ggpubr::stat_cor() +\n    ggsci::scale_color_jco() +\n    theme_light() +\n    anno_top(size = 0.2) +\n    ggalign() +\n    geom_density(aes(x = Sepal.Length, fill = Species, alpha = 0.6)) +\n    theme_no_axes() +\n    anno_right(size = 0.2) +\n    ggalign() +\n    geom_density(aes(y = Sepal.Width, fill = Species), alpha = 0.6) +\n    theme_no_axes() &\n    ggsci::scale_fill_jco() &\n    theme(legend.position = \"none\")\n#&gt; `geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "complexheatmap/single-heatmap.html",
    "href": "complexheatmap/single-heatmap.html",
    "title": "A Single Heatmap",
    "section": "",
    "text": "In this thread, we’ll use ggalign to draw all the heatmap in https://jokergoo.github.io/ComplexHeatmap-reference/book/a-single-heatmap.html\n\nCodelibrary(ggalign)\n#&gt; Loading required package: ggplot2\n#&gt; \n#&gt; Attaching package: 'ggalign'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     element_polygon\n\n\n\nCodeset.seed(123)\nnr1 &lt;- 4\nnr2 &lt;- 8\nnr3 &lt;- 6\nnr &lt;- nr1 + nr2 + nr3\nnc1 &lt;- 6\nnc2 &lt;- 8\nnc3 &lt;- 10\nnc &lt;- nc1 + nc2 + nc3\nmat &lt;- cbind(\n    rbind(\n        matrix(rnorm(nr1 * nc1, mean = 1, sd = 0.5), nrow = nr1),\n        matrix(rnorm(nr2 * nc1, mean = 0, sd = 0.5), nrow = nr2),\n        matrix(rnorm(nr3 * nc1, mean = 0, sd = 0.5), nrow = nr3)\n    ),\n    rbind(\n        matrix(rnorm(nr1 * nc2, mean = 0, sd = 0.5), nrow = nr1),\n        matrix(rnorm(nr2 * nc2, mean = 1, sd = 0.5), nrow = nr2),\n        matrix(rnorm(nr3 * nc2, mean = 0, sd = 0.5), nrow = nr3)\n    ),\n    rbind(\n        matrix(rnorm(nr1 * nc3, mean = 0.5, sd = 0.5), nrow = nr1),\n        matrix(rnorm(nr2 * nc3, mean = 0.5, sd = 0.5), nrow = nr2),\n        matrix(rnorm(nr3 * nc3, mean = 1, sd = 0.5), nrow = nr3)\n    )\n)\nmat &lt;- mat[sample(nr, nr), sample(nc, nc)]\nrownames(mat) &lt;- paste0(\"row\", seq_len(nr))\ncolnames(mat) &lt;- paste0(\"column\", seq_len(nc))\n\n\n\nIt is important to note that the ComplexHeatmap package reorders the dendrogram by default, while align_dendro() in ggalign does not modify the tree layout.\nAnother key difference is in how the two packages treat the starting point. ggalign considers the left-bottom as the starting point, whereas ComplexHeatmap starts from the left-top. When reordering the dendrogram, ComplexHeatmap does so in decreasing order, while ggalign uses an ascending order.\nTo modify colors in the heatmap, you can use the scale_fill_*() function from ggplot2, which provides a flexible way and enriched pallete to adjust color schemes.\n\ndim(mat)\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n# ComplexHeatmap::Heatmap(mat)\n#&gt; [1] 18 24\n\n\nggheatmap(mat) +\n    scale_fill_gradient2(low = \"green\", high = \"red\") +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro() +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\noob argument in the scale_fill_* function can be used to deal with the outliers.\n\nmat2 &lt;- mat\nmat2[1, 1] &lt;- 100000\nggheatmap(mat2) +\n    scale_fill_gradient2(\n        low = \"green\", high = \"red\",\n        limits = c(-2, 2),\n        oob = scales::squish\n    ) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\nWe can use align_plots() to arrange them.\n\nh1 &lt;- ggheatmap(mat) +\n    scale_fill_gradient2(name = \"mat\", low = \"green\", high = \"red\") +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n\nh2 &lt;- ggheatmap(mat / 4) +\n    scale_fill_gradient2(\n        name = \"mat/4\", limits = c(-2, 2L),\n        oob = scales::squish,\n        low = \"green\", high = \"red\"\n    ) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n\nh3 &lt;- ggheatmap(abs(mat)) +\n    scale_fill_gradient2(name = \"abs(mat)\", low = \"green\", high = \"red\") +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\nalign_plots(h1, h2, h3, ncol = 2L)\n#&gt; → heatmap built with `geom_tile()`\n#&gt; → heatmap built with `geom_tile()`\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    scale_fill_gradientn(colors = rev(rainbow(10))) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\nFor character matrix, you can use ggplot2 discrete filling scales.\n\ndiscrete_mat &lt;- matrix(sample(1:4, 100, replace = TRUE), 10, 10)\ncolors &lt;- structure(1:4, names = c(\"1\", \"2\", \"3\", \"4\")) # black, red, green, blue\nggheatmap(discrete_mat, aes(fill = factor(value))) +\n    scale_fill_manual(values = colors) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\ndiscrete_mat &lt;- matrix(sample(letters[1:4], 100, replace = TRUE), 10, 10)\ncolors &lt;- structure(1:4, names = letters[1:4])\nggheatmap(discrete_mat) +\n    scale_fill_manual(values = colors)\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nmat_with_na &lt;- mat\nna_index &lt;- sample(c(TRUE, FALSE),\n    nrow(mat) * ncol(mat),\n    replace = TRUE, prob = c(1, 9)\n)\nmat_with_na[na_index] &lt;- NA\nggheatmap(mat_with_na) +\n    scale_fill_gradient2(low = \"blue\", high = \"red\", na.value = \"black\") +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\nWe won’t compare the LAB and RGB space. If you want to convert color between different color space, try to use farver pacakge.\nIn ggplot2, you can use panel.border argument in theme() function to control the Heatmap body border.\n\nggheatmap(mat) +\n    theme(\n        axis.text.x = element_text(angle = -60, hjust = 0),\n        panel.border = element_rect(linetype = \"dashed\", fill = NA)\n    ) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\nYou can use the filling argument to turn off the heatmap cell filling, allowing you to customize the heatmap body geoms. Use the color aesthetic to specify the cell border color and the linewidth aesthetic to set the border width.\n\nggheatmap(mat, filling = NULL) +\n    geom_tile(aes(fill = value), color = \"white\") +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) &\n    theme(plot.margin = margin())\n\n\n\n\n\n\n\nTo draw a blank heatmap body:\n\nggheatmap(mat, filling = NULL) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) &\n    theme(plot.margin = margin())\n\n\n\n\n\n\n\n\nWe can use patch_titles() to add titles around each border of the plot. You can use theme() to control the text appearance.\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    patch_titles(right = \"I am a row title\") +\n    theme(plot.patch_title.right = element_text(face = \"bold\", size = 16)) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    patch_titles(top = \"I am a column title\") +\n    theme(plot.patch_title.top = element_text(face = \"bold\", size = 16)) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\n\n# ComplexHeatmap::Heatmap(mat,\n#   name = \"mat\", clustering_distance_rows = \"pearson\",\n#   column_title = \"pre-defined distance method (1 - pearson)\"\n# )\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_dendro(distance = \"pearson\", reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    patch_titles(top = \"pre-defined distance method (1 - pearson)\") +\n    theme(plot.patch_title.top = element_text(face = \"bold\", size = 16)) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n# ComplexHeatmap::Heatmap(mat,\n#     name = \"mat\", clustering_distance_rows = function(m) dist(m),\n#     column_title = \"a function that calculates distance matrix\"\n# )\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_dendro(distance = dist, reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    patch_titles(top = \"a function that calculates distance matrix\") +\n    theme(plot.patch_title.top = element_text(face = \"bold\", size = 16)) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nMethod to perform hierarchical clustering can be specified by method argument, Possible methods are those supported in hclust() function.\n\n# ComplexHeatmap::Heatmap(mat,\n#     name = \"mat\",\n#     clustering_method_rows = \"single\"\n# )\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_dendro(method = \"single\", reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\nUse distance = NULL if you don’t want to calculate the distance.\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_dendro(\n        distance = NULL, method = cluster::diana,\n        reorder_dendrogram = TRUE\n    ) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(\n        distance = NULL, method = cluster::agnes,\n        reorder_dendrogram = TRUE\n    ) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nIt’s easy for ggalign to color the branches by setting the color mapping, since ggalign will add the cutree() results into the underlying data.\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_dendro(aes(color = branch), k = 2L, reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nWe can use align_order() to set the order.\n\n# ComplexHeatmap::Heatmap(mat,\n#     name = \"mat\",\n#     row_order = order(as.numeric(gsub(\"row\", \"\", rownames(mat)))),\n#     column_order = order(as.numeric(gsub(\"column\", \"\", colnames(mat)))),\n#     column_title = \"reorder matrix\"\n# )\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_order(as.numeric(gsub(\"row\", \"\", rownames(mat)))) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_order(as.numeric(gsub(\"column\", \"\", colnames(mat)))) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nalign_order2() can directly take the seriate() function as the input and extract the ordering information.\n\nmat2 &lt;- max(mat) - mat\nggheatmap(mat2) +\n    scale_fill_gradient2(low = \"blue\", high = \"red\", midpoint = 2L) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_order2(seriation::seriate, method = \"BEA_TSP\") +\n    anno_top(size = unit(15, \"mm\")) +\n    align_order2(seriation::seriate, method = \"BEA_TSP\") &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\nThe above code will execute seriate() twice—once for each dimension. However, since a single run of seriate() can provide the ordering for both dimensions, we can manually extract the ordering indices to avoid redundancy.\n\no &lt;- seriation::seriate(mat2, method = \"BEA_TSP\")\nggheatmap(mat2) +\n    scale_fill_gradient2(low = \"blue\", high = \"red\", midpoint = 2L) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_order(seriation::get_order(o, 1L)) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_order(seriation::get_order(o, 2L)) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\nFor more use of the seriate() function, please refer to the seriation package.\n\nggplot2 use scales and theme to control the axis labels, Please see chapter for more details.\n\n# ComplexHeatmap::Heatmap(mat,\n#     name = \"mat\", row_names_side = \"left\", row_dend_side = \"right\",\n#     column_names_side = \"top\", column_dend_side = \"bottom\"\n# )\nggheatmap(mat) +\n    scale_x_continuous(position = \"top\") +\n    scale_y_continuous(position = \"right\") +\n    theme(axis.text.x = element_text(angle = 60, hjust = 0)) +\n    anno_left(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    scale_x_continuous(position = \"top\") +\n    anno_bottom(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    scale_y_continuous(position = \"right\") +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    scale_y_continuous(breaks = NULL) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(\n        axis.text.x = element_text(angle = -60, hjust = 0),\n        axis.text.y = element_text(face = \"bold\", size = 16)\n    ) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(\n        axis.text.x = element_text(angle = -60, hjust = 0),\n        axis.text.y = element_text(\n            face = \"bold\", size = 16,\n            colour = c(rep(\"red\", 10), rep(\"blue\", 8))\n        )\n    ) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; Warning: Vectorized input to `element_text()` is not officially supported.\n#&gt; ℹ Results may be unexpected or may change in future versions of ggplot2.\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_kmeans(2L) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_kmeans(3L) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_kmeans(2L) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_kmeans(3L) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\nThe dendrogram was calculated in each group defined by kmeans.\n\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_group(rep(c(\"A\", \"B\"), 9)) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_group(rep(c(\"C\", \"D\"), 12)) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nWhen you splitted by a dendrogram, the cutted height will be indicated with a dashed line.\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(k = 3L, reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(k = 2L, reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(aes(color = branch), k = 3L, reorder_dendrogram = TRUE) +\n    scale_color_brewer(palette = \"Dark2\") +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(k = 2L, reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nThe order of the panels always follow the factor level. Note: the merging of dendrogram between ComplexHeatmap and ggalign is a little different.\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_group(rep(LETTERS[1:3], 6)) +\n    align_dendro(aes(color = branch),\n        reorder_dendrogram = TRUE,\n        reorder_group = TRUE,\n        merge_dendrogram = TRUE\n    ) +\n    scale_color_brewer(palette = \"Dark2\") +\n    anno_top(size = unit(15, \"mm\")) +\n    align_group(rep(letters[1:6], 4)) +\n    align_dendro(aes(color = branch),\n        reorder_dendrogram = TRUE,\n        reorder_group = TRUE,\n        merge_dendrogram = TRUE\n    ) +\n    quad_active() -\n    with_quad(theme(strip.text = element_text()), \"tr\") &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_group(rep(LETTERS[1:3], 6)) +\n    align_dendro(aes(color = branch), reorder_dendrogram = TRUE) +\n    scale_color_brewer(palette = \"Dark2\") +\n    anno_top(size = unit(15, \"mm\")) +\n    align_group(rep(letters[1:6], 4)) +\n    align_dendro(aes(color = branch), reorder_dendrogram = TRUE) +\n    quad_active() -\n    with_quad(theme(strip.text = element_text()), \"tr\") &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`"
  },
  {
    "objectID": "complexheatmap/single-heatmap.html#colors",
    "href": "complexheatmap/single-heatmap.html#colors",
    "title": "A Single Heatmap",
    "section": "",
    "text": "It is important to note that the ComplexHeatmap package reorders the dendrogram by default, while align_dendro() in ggalign does not modify the tree layout.\nAnother key difference is in how the two packages treat the starting point. ggalign considers the left-bottom as the starting point, whereas ComplexHeatmap starts from the left-top. When reordering the dendrogram, ComplexHeatmap does so in decreasing order, while ggalign uses an ascending order.\nTo modify colors in the heatmap, you can use the scale_fill_*() function from ggplot2, which provides a flexible way and enriched pallete to adjust color schemes.\n\ndim(mat)\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n# ComplexHeatmap::Heatmap(mat)\n#&gt; [1] 18 24\n\n\nggheatmap(mat) +\n    scale_fill_gradient2(low = \"green\", high = \"red\") +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro() +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\noob argument in the scale_fill_* function can be used to deal with the outliers.\n\nmat2 &lt;- mat\nmat2[1, 1] &lt;- 100000\nggheatmap(mat2) +\n    scale_fill_gradient2(\n        low = \"green\", high = \"red\",\n        limits = c(-2, 2),\n        oob = scales::squish\n    ) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\nWe can use align_plots() to arrange them.\n\nh1 &lt;- ggheatmap(mat) +\n    scale_fill_gradient2(name = \"mat\", low = \"green\", high = \"red\") +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n\nh2 &lt;- ggheatmap(mat / 4) +\n    scale_fill_gradient2(\n        name = \"mat/4\", limits = c(-2, 2L),\n        oob = scales::squish,\n        low = \"green\", high = \"red\"\n    ) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n\nh3 &lt;- ggheatmap(abs(mat)) +\n    scale_fill_gradient2(name = \"abs(mat)\", low = \"green\", high = \"red\") +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\nalign_plots(h1, h2, h3, ncol = 2L)\n#&gt; → heatmap built with `geom_tile()`\n#&gt; → heatmap built with `geom_tile()`\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    scale_fill_gradientn(colors = rev(rainbow(10))) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\nFor character matrix, you can use ggplot2 discrete filling scales.\n\ndiscrete_mat &lt;- matrix(sample(1:4, 100, replace = TRUE), 10, 10)\ncolors &lt;- structure(1:4, names = c(\"1\", \"2\", \"3\", \"4\")) # black, red, green, blue\nggheatmap(discrete_mat, aes(fill = factor(value))) +\n    scale_fill_manual(values = colors) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\ndiscrete_mat &lt;- matrix(sample(letters[1:4], 100, replace = TRUE), 10, 10)\ncolors &lt;- structure(1:4, names = letters[1:4])\nggheatmap(discrete_mat) +\n    scale_fill_manual(values = colors)\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nmat_with_na &lt;- mat\nna_index &lt;- sample(c(TRUE, FALSE),\n    nrow(mat) * ncol(mat),\n    replace = TRUE, prob = c(1, 9)\n)\nmat_with_na[na_index] &lt;- NA\nggheatmap(mat_with_na) +\n    scale_fill_gradient2(low = \"blue\", high = \"red\", na.value = \"black\") +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\nWe won’t compare the LAB and RGB space. If you want to convert color between different color space, try to use farver pacakge.\nIn ggplot2, you can use panel.border argument in theme() function to control the Heatmap body border.\n\nggheatmap(mat) +\n    theme(\n        axis.text.x = element_text(angle = -60, hjust = 0),\n        panel.border = element_rect(linetype = \"dashed\", fill = NA)\n    ) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\nYou can use the filling argument to turn off the heatmap cell filling, allowing you to customize the heatmap body geoms. Use the color aesthetic to specify the cell border color and the linewidth aesthetic to set the border width.\n\nggheatmap(mat, filling = NULL) +\n    geom_tile(aes(fill = value), color = \"white\") +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) &\n    theme(plot.margin = margin())\n\n\n\n\n\n\n\nTo draw a blank heatmap body:\n\nggheatmap(mat, filling = NULL) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) &\n    theme(plot.margin = margin())"
  },
  {
    "objectID": "complexheatmap/single-heatmap.html#titles",
    "href": "complexheatmap/single-heatmap.html#titles",
    "title": "A Single Heatmap",
    "section": "",
    "text": "We can use patch_titles() to add titles around each border of the plot. You can use theme() to control the text appearance.\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    patch_titles(right = \"I am a row title\") +\n    theme(plot.patch_title.right = element_text(face = \"bold\", size = 16)) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    patch_titles(top = \"I am a column title\") +\n    theme(plot.patch_title.top = element_text(face = \"bold\", size = 16)) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`"
  },
  {
    "objectID": "complexheatmap/single-heatmap.html#clustering",
    "href": "complexheatmap/single-heatmap.html#clustering",
    "title": "A Single Heatmap",
    "section": "",
    "text": "# ComplexHeatmap::Heatmap(mat,\n#   name = \"mat\", clustering_distance_rows = \"pearson\",\n#   column_title = \"pre-defined distance method (1 - pearson)\"\n# )\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_dendro(distance = \"pearson\", reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    patch_titles(top = \"pre-defined distance method (1 - pearson)\") +\n    theme(plot.patch_title.top = element_text(face = \"bold\", size = 16)) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n# ComplexHeatmap::Heatmap(mat,\n#     name = \"mat\", clustering_distance_rows = function(m) dist(m),\n#     column_title = \"a function that calculates distance matrix\"\n# )\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_dendro(distance = dist, reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    patch_titles(top = \"a function that calculates distance matrix\") +\n    theme(plot.patch_title.top = element_text(face = \"bold\", size = 16)) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nMethod to perform hierarchical clustering can be specified by method argument, Possible methods are those supported in hclust() function.\n\n# ComplexHeatmap::Heatmap(mat,\n#     name = \"mat\",\n#     clustering_method_rows = \"single\"\n# )\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_dendro(method = \"single\", reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\nUse distance = NULL if you don’t want to calculate the distance.\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_dendro(\n        distance = NULL, method = cluster::diana,\n        reorder_dendrogram = TRUE\n    ) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(\n        distance = NULL, method = cluster::agnes,\n        reorder_dendrogram = TRUE\n    ) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nIt’s easy for ggalign to color the branches by setting the color mapping, since ggalign will add the cutree() results into the underlying data.\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_dendro(aes(color = branch), k = 2L, reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`"
  },
  {
    "objectID": "complexheatmap/single-heatmap.html#set-row-and-column-orders",
    "href": "complexheatmap/single-heatmap.html#set-row-and-column-orders",
    "title": "A Single Heatmap",
    "section": "",
    "text": "We can use align_order() to set the order.\n\n# ComplexHeatmap::Heatmap(mat,\n#     name = \"mat\",\n#     row_order = order(as.numeric(gsub(\"row\", \"\", rownames(mat)))),\n#     column_order = order(as.numeric(gsub(\"column\", \"\", colnames(mat)))),\n#     column_title = \"reorder matrix\"\n# )\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_order(as.numeric(gsub(\"row\", \"\", rownames(mat)))) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_order(as.numeric(gsub(\"column\", \"\", colnames(mat)))) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`"
  },
  {
    "objectID": "complexheatmap/single-heatmap.html#seriation",
    "href": "complexheatmap/single-heatmap.html#seriation",
    "title": "A Single Heatmap",
    "section": "",
    "text": "align_order2() can directly take the seriate() function as the input and extract the ordering information.\n\nmat2 &lt;- max(mat) - mat\nggheatmap(mat2) +\n    scale_fill_gradient2(low = \"blue\", high = \"red\", midpoint = 2L) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_order2(seriation::seriate, method = \"BEA_TSP\") +\n    anno_top(size = unit(15, \"mm\")) +\n    align_order2(seriation::seriate, method = \"BEA_TSP\") &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\nThe above code will execute seriate() twice—once for each dimension. However, since a single run of seriate() can provide the ordering for both dimensions, we can manually extract the ordering indices to avoid redundancy.\n\no &lt;- seriation::seriate(mat2, method = \"BEA_TSP\")\nggheatmap(mat2) +\n    scale_fill_gradient2(low = \"blue\", high = \"red\", midpoint = 2L) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(20, \"mm\")) +\n    align_order(seriation::get_order(o, 1L)) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_order(seriation::get_order(o, 2L)) &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\nFor more use of the seriate() function, please refer to the seriation package."
  },
  {
    "objectID": "complexheatmap/single-heatmap.html#dimension-labels",
    "href": "complexheatmap/single-heatmap.html#dimension-labels",
    "title": "A Single Heatmap",
    "section": "",
    "text": "ggplot2 use scales and theme to control the axis labels, Please see chapter for more details.\n\n# ComplexHeatmap::Heatmap(mat,\n#     name = \"mat\", row_names_side = \"left\", row_dend_side = \"right\",\n#     column_names_side = \"top\", column_dend_side = \"bottom\"\n# )\nggheatmap(mat) +\n    scale_x_continuous(position = \"top\") +\n    scale_y_continuous(position = \"right\") +\n    theme(axis.text.x = element_text(angle = 60, hjust = 0)) +\n    anno_left(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    scale_x_continuous(position = \"top\") +\n    anno_bottom(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    scale_y_continuous(position = \"right\") +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    scale_y_continuous(breaks = NULL) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(\n        axis.text.x = element_text(angle = -60, hjust = 0),\n        axis.text.y = element_text(face = \"bold\", size = 16)\n    ) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(\n        axis.text.x = element_text(angle = -60, hjust = 0),\n        axis.text.y = element_text(\n            face = \"bold\", size = 16,\n            colour = c(rep(\"red\", 10), rep(\"blue\", 8))\n        )\n    ) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; Warning: Vectorized input to `element_text()` is not officially supported.\n#&gt; ℹ Results may be unexpected or may change in future versions of ggplot2.\n#&gt; → heatmap built with `geom_tile()`"
  },
  {
    "objectID": "complexheatmap/single-heatmap.html#heatmap-split",
    "href": "complexheatmap/single-heatmap.html#heatmap-split",
    "title": "A Single Heatmap",
    "section": "",
    "text": "ggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_kmeans(2L) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_kmeans(3L) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_kmeans(2L) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_kmeans(3L) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\nThe dendrogram was calculated in each group defined by kmeans.\n\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_group(rep(c(\"A\", \"B\"), 9)) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_group(rep(c(\"C\", \"D\"), 12)) +\n    align_dendro(reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nWhen you splitted by a dendrogram, the cutted height will be indicated with a dashed line.\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(k = 3L, reorder_dendrogram = TRUE) +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(k = 2L, reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_dendro(aes(color = branch), k = 3L, reorder_dendrogram = TRUE) +\n    scale_color_brewer(palette = \"Dark2\") +\n    anno_top(size = unit(15, \"mm\")) +\n    align_dendro(k = 2L, reorder_dendrogram = TRUE) +\n    quad_active() &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nThe order of the panels always follow the factor level. Note: the merging of dendrogram between ComplexHeatmap and ggalign is a little different.\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_group(rep(LETTERS[1:3], 6)) +\n    align_dendro(aes(color = branch),\n        reorder_dendrogram = TRUE,\n        reorder_group = TRUE,\n        merge_dendrogram = TRUE\n    ) +\n    scale_color_brewer(palette = \"Dark2\") +\n    anno_top(size = unit(15, \"mm\")) +\n    align_group(rep(letters[1:6], 4)) +\n    align_dendro(aes(color = branch),\n        reorder_dendrogram = TRUE,\n        reorder_group = TRUE,\n        merge_dendrogram = TRUE\n    ) +\n    quad_active() -\n    with_quad(theme(strip.text = element_text()), \"tr\") &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\nggheatmap(mat) +\n    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +\n    anno_right(size = unit(15, \"mm\")) +\n    align_group(rep(LETTERS[1:3], 6)) +\n    align_dendro(aes(color = branch), reorder_dendrogram = TRUE) +\n    scale_color_brewer(palette = \"Dark2\") +\n    anno_top(size = unit(15, \"mm\")) +\n    align_group(rep(letters[1:6], 4)) +\n    align_dendro(aes(color = branch), reorder_dendrogram = TRUE) +\n    quad_active() -\n    with_quad(theme(strip.text = element_text()), \"tr\") &\n    theme(plot.margin = margin())\n#&gt; → heatmap built with `geom_tile()`"
  }
]